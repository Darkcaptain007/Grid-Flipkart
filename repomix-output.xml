This file is a merged representation of a subset of the codebase, containing files not matching ignore patterns, combined into a single document by Repomix.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of a subset of the repository's contents that is considered the most important context.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
5. Multiple file entries, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching these patterns are excluded: **/cleaned_combined.csv
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

</file_summary>

<directory_structure>
client/
  public/
    index.html
    manifest.json
    robots.txt
  src/
    Components/
      Cart/
        Cart.jsx
        CartItem.jsx
        EmptyCart.jsx
        GroupButton.jsx
        TotalView.jsx
      Header/
        CustomButtons.jsx
        Header.jsx
        Profile.jsx
        Search.jsx
      Home/
        Banner.jsx
        CategoryMenu.jsx
        MidSection.jsx
        MidSlide.jsx
        NarBar.jsx
        Slide.jsx
      ItemDetails/
        ActionItem.jsx
        DetailView.jsx
        ProductDetail.jsx
      Login/
        LoginDialog.jsx
      SearchResults/
        SearchResultsPage.jsx
      default.js
      Home.jsx
      NotFound.jsx
      Product.jsx
    constant/
      data.js
    context/
      ContextProvider.jsx
    razorpay/
      loadPayment.js
      razorpay.js
    reducers/
      reducer.js
    redux/
      actions/
        cartActions.js
        productActions.js
      constants/
        cartConstants.js
        productConstant.js
      reducers/
        cartReducer.js
        productReducer.js
      store.js
    service/
      api.js
    templates/
      TemplateProvider.js
    App.css
    App.js
    index.css
    index.js
  .gitignore
  package.json
server/
  constants/
    product.js
  controller/
    cart-controller.js
    categoryController.js
    payment-controller.js
    product-controller.js
    search-controller.js
    user-controller.js
  database/
    db.js
    redis.js
  middleware/
    auth.js
  model/
    cartSchema.js
    categorySchema.js
    orderSchema.js
    productSchema.js
    userSchema.js
  routes/
    route.js
  utils/
    userHistory.js
  .gitignore
  categories_subcategories_list.csv
  importCategories.js
  importData.js
  index.js
  package.json
package.json
README.md
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path="client/public/index.html">
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" href="%PUBLIC_URL%/favicon.ico" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta name="theme-color" content="#000000" />
    <meta
      name="description"
      content="Web site created using create-react-app"
    />
    <link rel="apple-touch-icon" href="%PUBLIC_URL%/logo192.png" />
    <!--
      manifest.json provides metadata used when your web app is installed on a
      user's mobile device or desktop. See https://developers.google.com/web/fundamentals/web-app-manifest/
    -->
    <link rel="manifest" href="%PUBLIC_URL%/manifest.json" />
    <!--
      Notice the use of %PUBLIC_URL% in the tags above.
      It will be replaced with the URL of the `public` folder during the build.
      Only files inside the `public` folder can be referenced from the HTML.

      Unlike "/favicon.ico" or "favicon.ico", "%PUBLIC_URL%/favicon.ico" will
      work correctly both with client-side routing and a non-root public URL.
      Learn how to configure a non-root public URL by running `npm run build`.
    -->
    <title>React App</title>
  </head>
  <body>
    <noscript>You need to enable JavaScript to run this app.</noscript>
    <div id="root"></div>
    <!--
      This HTML file is a template.
      If you open it directly in the browser, you will see an empty page.

      You can add webfonts, meta tags, or analytics to this file.
      The build step will place the bundled scripts into the <body> tag.

      To begin the development, run `npm start` or `yarn start`.
      To create a production bundle, use `npm run build` or `yarn build`.
    -->
  </body>
</html>
</file>

<file path="client/public/manifest.json">
{
  "short_name": "React App",
  "name": "Create React App Sample",
  "start_url": ".",
  "display": "standalone",
  "theme_color": "#000000",
  "background_color": "#ffffff"
}
</file>

<file path="client/public/robots.txt">
# https://www.robotstxt.org/robotstxt.html
User-agent: *
Disallow:
</file>

<file path="client/src/Components/Cart/Cart.jsx">
import { Box, makeStyles, Typography, Button, Grid } from '@material-ui/core';
import CartItem from './CartItem';
import { useEffect, useMemo } from 'react';
import React from 'react';
import { useSelector, useDispatch } from 'react-redux';
import { addToCart, removeFromCart } from '../../redux/actions/cartActions';
import TotalView from './TotalView';
import EmptyCart from './EmptyCart';
import { loadRazorpay } from '../../razorpay/loadPayment';


const useStyle = makeStyles(theme => ({
    component: {
        // marginTop: 55,
        padding: '30px 135px',
        display: 'flex',
        [theme.breakpoints.down('sm')]: {
            padding: '15px 0'
        }
    },
    leftComponent: {
        // width: '67%',
        paddingRight: 15,
        [theme.breakpoints.down('sm')]: {
            marginBottom: 15
        }
    },
    header: {
        padding: '15px 24px',
        background: '#fff'
    },
    bottom: {
        padding: '16px 22px',
        background: '#fff',
        boxShadow: '0 -2px 10px 0 rgb(0 0 0 / 10%)',
        borderTop: '1px solid #f0f0f0'
    },
    placeOrder: {
        display: 'flex',
        marginLeft: 'auto',
        background: '#fb641b',
        color: '#fff',
        borderRadius: 2,
        width: 250,
        height: 51
    }
}));

const Cart = ({ match, history }) => {
    const classes = useStyle();

    const cartDetails = useSelector(state => state.cart);
    const { cartItems } = cartDetails;

    const dispatch = useDispatch();
    
    useEffect(() => {
        if(cartItems && match.params.id !== cartItems.id)   
            dispatch(addToCart(match.params.id));
        console.log(cartItems);
    }, [dispatch, cartItems, match]);

    const removeItemFromCart = (id) => {
        dispatch(removeFromCart(id));
    }

    const buyNow = async () => {
        loadRazorpay(500);
    }

    const total = useMemo(() => {
    return cartItems.reduce((acc, item) => acc + (item.price.cost * item.quantity), 0);
  }, [cartItems]);
    return (
        <>
        { cartItems.length ? 
            <Grid container className={classes.component}>
                <Grid item lg={9} md={9} sm={12} xs={12} className={classes.leftComponent}>
                    <Box className={classes.header}>
                        <Typography style={{fontWeight: 600, fontSize: 18}}>My Cart ({cartItems?.length})</Typography>
                    </Box>
                        {   cartItems.map(item => (
                                <CartItem item={item} removeItemFromCart={removeItemFromCart}/>
                            ))
                        }
                    <Box className={classes.bottom}>
                        <Button onClick={() => buyNow()} variant="contained" className={classes.placeOrder}>Place Order</Button>
                    </Box>
                </Grid>
                <Grid item lg={3} md={3} sm={12} xs={12}>
                    <TotalView cartItems={cartItems} />
                </Grid>
            </Grid> : <EmptyCart />
        }
        </>

    )
}
const MemoizedCartItem = React.memo(CartItem);
export default Cart;
</file>

<file path="client/src/Components/Cart/CartItem.jsx">
import { Card, makeStyles, Box, Typography, Button } from '@material-ui/core';
import clsx from 'clsx';
import GroupButton from './GroupButton';

const useStyle = makeStyles({
    component: {
        borderTop: '1px solid #f0f0f0',
        borderRadius: 0,
        display: 'flex'
    },
    leftComponent: {
        margin: 20, 
        display: 'flex',
        flexDirection: 'column'
    },
    image: {
        height: 110,
        width: 110
    },
    mid: {
        margin: 20
    },
    greyTextColor: {
        color: '#878787'
    },
    smallText: {
        fontSize: 14,
    },
    price: {
        fontSize: 18,
        fontWeight: 600
    },
    remove: {
        marginTop: 20,
        fontSize: 16
    }
});

const CartItem = ({ item, removeItemFromCart }) => {
    console.log(item)
    const classes = useStyle();
    const fassured = 'https://static-assets-web.flixcart.com/www/linchpin/fk-cp-zion/img/fa_62673a.png';

    return (
        <Card className={classes.component}>
            <Box className={classes.leftComponent}>
                <img src={item.url} className={classes.image} alt="" />
                <GroupButton />
            </Box>
            <Box className={classes.mid}>
                <Typography>{item.title.longTitle}</Typography>
                <Typography className={clsx(classes.greyTextColor, classes.smallText)} style={{ marginTop: 10 }}>Seller:RetailNet
                    <span><img src={fassured} style={{ width: 50, marginLeft: 10 }} alt="" /></span>
                </Typography>
                <Typography style={{margin: '20px 0'}}>
                    <span className={classes.price}>₹{item.price.cost}</span>&nbsp;&nbsp;&nbsp;
                    <span className={classes.greyTextColor}><strike>₹{item.price.mrp}</strike></span>&nbsp;&nbsp;&nbsp;
                    <span style={{ color: '#388E3C' }}>{item.price.discount} off</span>
                </Typography>
                <Button className={classes.remove} onClick={() => removeItemFromCart(item.id)}>Remove</Button>
            </Box>
        </Card>
    )
}

export default CartItem;
</file>

<file path="client/src/Components/Cart/EmptyCart.jsx">
import { makeStyles, Typography, Box } from '@material-ui/core';

const useStyle = makeStyles({
    component: {
        width: '80%%',
        height: '65vh',
        background: '#fff',
        margin: '80px 140px'
    },
    image: {
        width: '15%'
    },
    container: {
        textAlign: 'center',
        paddingTop: 70
    }
})


const EmptyCart = () => {
    const imgurl = 'https://rukminim1.flixcart.com/www/800/800/promos/16/05/2019/d438a32e-765a-4d8b-b4a6-520b560971e8.png?q=90';
    const classes = useStyle();

    return (
        <Box className={classes.component}>
            <Box className={classes.container}>
                <img src={imgurl} className={classes.image} alt="" />
                <Typography>Your cart is empty!</Typography>
                <span>Add items to it now.</span>
            </Box>
        </Box>
    )
}

export default EmptyCart;
</file>

<file path="client/src/Components/Cart/GroupButton.jsx">
import React, { useState } from "react";
import { ButtonGroup, Button, makeStyles } from "@material-ui/core";

const useStyle = makeStyles({
    component: {
        marginTop: 30
    },
    button :{
        borderRadius: '50%'
    }
})

const GroupedButton = () => {
    const classes = useStyle();
    const [ counter, setCounter ] = useState(1);

    const handleIncrement = () => {
        setCounter(counter => counter + 1 );
    };

    const handleDecrement = () => {
        setCounter(counter => counter - 1 );
    };

    return (
        <ButtonGroup className={classes.component} >
            <Button className={classes.button} onClick={() => handleDecrement()} disabled={counter === 0}>-</Button>
            <Button disabled>{counter}</Button>
            <Button className={classes.button} onClick={() => handleIncrement()}>+</Button>
        </ButtonGroup>
    );
}

export default GroupedButton;
</file>

<file path="client/src/Components/Cart/TotalView.jsx">
import { useState, useEffect } from 'react';
import { Box, makeStyles, Typography } from '@material-ui/core';
import clsx from 'clsx';

const useStyle = makeStyles({
    component: {
        // width: '30%'
    },
    header: {
        padding: '15px 24px',
        background: '#fff'
    },
    greyTextColor: {
        color: '#878787'
    },
    container: {
        '& > *': {
            marginBottom: 20,
            fontSize: 14
        }
    },
    price: {
        float: 'right'
    },
    totalAmount: {
        fontSize: 18,
        fontWeight: 600,
        borderTop: '1px dashed #e0e0e0',
        padding: '20px 0',
        borderBottom: '1px dashed #e0e0e0'
    }
})


const TotalView = ({ cartItems }) => {
    const classes = useStyle();
    const [price, setPrice] = useState(0);
    const [discount, setDiscount] = useState(0)


    useEffect(() => {
        const totalAmount = () => {
            let price = 0, discount = 0;
            console.log(cartItems);
            cartItems.map(item => {
                price += item.price.mrp
                discount += (item.price.mrp - item.price.cost) 
            })
            setPrice(price);
            setDiscount(discount);
        };
        totalAmount();
    }, [cartItems]);
    
    
    return (
        <Box className={classes.component}>
            <Box className={classes.header} style={{borderBottom: '1px solid #f0f0f0'}}>
                <Typography className={classes.greyTextColor}>PRICE DETAILS</Typography>
            </Box>
            <Box className={clsx(classes.header, classes.container)}>
                <Typography>Price ({cartItems?.length} item)<span className={classes.price}>₹{price}</span></Typography>
                <Typography>Discount<span className={classes.price}>-₹{discount}</span></Typography>
                <Typography>Delivery Charges<span className={classes.price}>₹40</span></Typography>
                <Typography className={classes.totalAmount}>Total Amount<span className={classes.price}>₹{price - discount + 40}</span></Typography>
                <Typography style={{fontSize: 16, color: 'green'}}>You will save ₹{discount - 40} on this order</Typography>
            </Box>
        </Box>
    )
}

export default TotalView;
</file>

<file path="client/src/Components/Header/CustomButtons.jsx">
import { useState, useContext } from 'react';
import { makeStyles, Box, Typography, Badge, Button } from '@material-ui/core';
import { Link } from 'react-router-dom';
import { ShoppingCart } from '@material-ui/icons';
import LoginDialog from '../Login/LoginDialog';
import { LoginContext } from '../../context/ContextProvider';
import { useSelector } from 'react-redux';
import Profile from './Profile';

const useStyle = makeStyles(theme => ({
  wrapper: {
    margin: '0 5% 0 auto',
    display: 'flex',
    alignItems: 'center',
    '& > *': {
      marginRight: 32,
      textDecoration: 'none',
      color: '#FFFFFF',
      fontSize: 12,
      alignItems: 'center',
      display: 'flex',
      lineHeight: '20px',
      [theme.breakpoints.down('sm')]: {
        color: '#ffffffff',
        alignItems: 'center',
        display: 'flex',
        flexDirection: 'column',
        marginTop: 10
      }
    },
    [theme.breakpoints.down('sm')]: {
      display: 'block'
    }
  },
  login: {
    color: '#2874f0',
    background: '#FFFFFF',
    textTransform: 'none',
    fontWeight: 600,
    borderRadius: 2,
    padding: '5px 40px',
    height: 32,
    boxShadow: 'none',
    [theme.breakpoints.down('sm')]: {
      background: '#2874f0ff',
      color: '#FFFFFF'
    }
  }
}));

const CustomButtons = () => {
  const classes = useStyle();
  const [open, setOpen] = useState(false);
  const { account, logout, setAccount } = useContext(LoginContext);
  const cartDetails = useSelector(state => state.cart);
  const { cartItems } = cartDetails;

  const openDialog = () => setOpen(true);

  return (
    <Box className={classes.wrapper}>
      {/* User/Profile/Login section */}
      <Box display="flex" alignItems="center">
        {account
          ? <Profile account={account} setAccount={() => {}} />
          : <Button onClick={openDialog} className={classes.login}>Login</Button>
        }
      </Box>

      {/* "More" Section */}
      <Box display="flex" alignItems="center">
        <Typography>More</Typography>
      </Box>

      {/* Cart Section */}
      <Box display="flex" alignItems="center">
        <Link to="/cart" style={{
          display: 'flex',
          alignItems: 'center',
          textDecoration: 'none',
          color: '#FFF'
        }}>
          <Badge badgeContent={cartItems?.length} color="secondary">
            <ShoppingCart />
          </Badge>
          <Typography style={{ marginLeft: 10 }}>Cart</Typography>
        </Link>
      </Box>

      {/* Logout */}
      {account && (
        <Box display="flex" alignItems="center">
          <Button onClick={logout} style={{ color: '#fff', fontSize: 12, fontWeight: 500 }}>
            Logout
          </Button>
        </Box>
      )}

      {/* Login Dialog */}
      <LoginDialog open={open} setOpen={setOpen} setAccount={setAccount} />
    </Box>
  );
};

export default CustomButtons;
</file>

<file path="client/src/Components/Header/Header.jsx">
import { AppBar, Toolbar, makeStyles, Box, Typography, withStyles, IconButton, Drawer, List} from '@material-ui/core';
import { Link } from 'react-router-dom';
import CustomButtons from './CustomButtons';
import Search from './Search';
import { Menu } from '@material-ui/icons';
import { useState } from 'react';

const useStyle = makeStyles(theme => ({
    header: {
        background: '#2874f0',
        height: 55
    },
    component: {
        marginLeft: '12%',
        lineHeight: 0,
        color: '#FFFFFF',
        textDecoration: 'none'
    },
    logo: {
        width: 75
    },
    container: {
        display: 'flex',
    },
    subHeading: {
        fontSize: 10,
        fontStyle: 'italic'
    },
    subURL: {
        width: 10,
        height: 10,
        marginLeft: 4
    },
    list: {
        width: 250
    },
    menuButton: {
        display: 'none',
        [theme.breakpoints.down('sm')]: {
            display: 'block'
        }
    },
    customButtons: {
        margin: '0 5% 0 auto', 
        [theme.breakpoints.down('sm')]: {
            display: 'none'
        } 
    }
}));

const ToolBar = withStyles({
    root: {
      minHeight: 55
    },
})(Toolbar);

const Header = () => {
    const classes = useStyle();
    const logoURL = 'https://static-assets-web.flixcart.com/www/linchpin/fk-cp-zion/img/flipkart-plus_8d85f4.png';
    const subURL = 'https://static-assets-web.flixcart.com/www/linchpin/fk-cp-zion/img/plus_aef861.png';

    const [open, setOpen] = useState(false);

    const handleClose = () => {
        setOpen(false);
    }

    const handleOpen = () => {
        setOpen(true);
    }

    const list = () => (
        <Box className={classes.list} onClick={handleClose}>
            <List>
                <listItem button>
                    <CustomButtons />
                </listItem>
            </List>
        </Box>
    );


    return (
        <AppBar position="fixed" className={classes.header}>
            <ToolBar>
                <IconButton
                    color="inherit"
                    className={classes.menuButton}
                    onClick={handleOpen}
                >
                    <Menu />
                </IconButton>

                <Drawer open={open} onClose={handleClose}>
                    {list()}
                </Drawer>

                <Link to='/' className={classes.component}>
                    <img src={logoURL} className={classes.logo} alt="" />
                    <Box component="span" className={classes.container}>
                        <Typography className = {classes.subHeading}>Explore <Box component="span" style={{color:'#FFE500'}}>Plus</Box></Typography>
                        <img src={subURL} className={classes.subURL} alt="" />
                    </Box>
                </Link>
                <Search />
                <span className={classes.customButtons}><CustomButtons /></span>
            </ToolBar>
        </AppBar>
    )
}

export default Header;
</file>

<file path="client/src/Components/Header/Profile.jsx">
import { useState } from 'react';
import { Link } from 'react-router-dom';
import { Typography, Menu, MenuItem, makeStyles } from '@material-ui/core';
import { PowerSettingsNew } from '@material-ui/icons';

const useStyle = makeStyles({
    component: {
        marginTop: 40,
    },
    logout: {
        fontSize: 14,
        marginLeft: 20
    }
})

const Profile = ({ account, setAccount }) => {
    const [open, setOpen] = useState(false);
    const classes = useStyle();

    const handleClick = (event) => {
        setOpen(event.currentTarget);
    };

    const handleClose = () => {
        setOpen(false);
    };

    const logout = () => {
        setAccount('');
    }
    
    return (
        <>
            <Link onClick={handleClick}><Typography style={{ marginTop: 2 }}>{account}</Typography></Link>
            <Menu
                anchorEl={open}
                open={Boolean(open)}
                onClose={handleClose}
                className={classes.component}
            >
                <MenuItem onClick={() => { handleClose(); logout();}}>
                    <PowerSettingsNew fontSize='small' color='primary'/> 
                    <Typography className={classes.logout}>Logout</Typography>
                </MenuItem>
            </Menu>
        </>
    )    
}

export default Profile;
</file>

<file path="client/src/Components/Header/Search.jsx">
import { useState, useEffect, useRef, useContext } from 'react';
import { InputBase, List, ListItem, Typography, makeStyles, Box } from '@material-ui/core';
import SearchIcon from '@material-ui/icons/Search';
import { useHistory } from 'react-router-dom';
import axios from 'axios';
import DOMPurify from 'dompurify';
import { LoginContext } from '../../context/ContextProvider';


const useStyle = makeStyles(theme => ({
  search: {
    borderRadius: 6,
    marginLeft: 25,
    width: '45%',
    backgroundColor: '#fff',
    display: 'flex',
    position: 'relative',
  },
  searchIcon: {
    marginLeft: 'auto',
    padding: 5,
    display: 'flex',
    color: 'blue',
    cursor: 'pointer',
  },
  inputRoot: { fontSize: 'unset', width: '100%' },
  inputInput: { paddingLeft: 20, width: '100%' },
  list: {
    position: 'absolute',
    color: '#000',
    backgroundColor: '#fff',
    marginTop: 36,
    width: '100%',
    borderRadius: '0 0 2px 2px',
    boxShadow: '0 2px 4px 0 rgb(0 0 0 / 20%)',
    maxHeight: 350,
    overflowY: 'auto',
    zIndex: 1000,
  },
  suggestionCategory: { fontWeight: 600, color: '#2874f0', paddingLeft: 12 },
  suggestionType: { fontSize: 12, color: '#666', marginLeft: 8 },
}));


const Search = () => {
  const classes = useStyle();
  const history = useHistory();
  const [text, setText] = useState('');
  const [results, setResults] = useState([]);
  const suggestionCache = useRef(new Map());
  const { account } = useContext(LoginContext);


  useEffect(() => {
    if (!text) {
      setResults([]);
      return;
    }
    const fetchSuggestions = async () => {
      if (suggestionCache.current.has(text)) {
        setResults(suggestionCache.current.get(text));
        return;
      }
      try {
        const { data } = await axios.get(
          `http://localhost:8000/autosuggest?q=${encodeURIComponent(text)}${account ? `&userId=${encodeURIComponent(account)}` : ''}`
        );
        const limitedResults = data.slice(0, 8);
        setResults(limitedResults);
        suggestionCache.current.set(text, limitedResults);
      } catch (error) {
        console.error("Autosuggest API call failed:", error);
        setResults([]);
      }
    };
    const timeoutId = setTimeout(fetchSuggestions, 400); // debounce
    return () => clearTimeout(timeoutId);
  }, [text, account]);


  const handleTextChange = e => setText(e.target.value);


  const handleSearch = () => {
    if (text.trim()) {
      let searchQuery = text.trim();

      // If there are suggestions and user presses Enter without clicking,
      // use the top suggestion as the search query
      if (results.length > 0) {
        const topSuggestion = results[0];
        searchQuery = topSuggestion.type === 'product' 
          ? topSuggestion.title.longTitle 
          : topSuggestion.name;
      }

      history.push(`/search?q=${encodeURIComponent(searchQuery)}`);
      clearSearch();
    }
  };


  const clearSearch = () => {
    setText('');
    setResults([]);
  };


  const onSuggestionClick = async suggestion => {
    console.log('Suggestion clicked:', suggestion); // Debug: Log the full suggestion object


    if (suggestion.type === 'product') {
        if (!account) {
            console.warn('User not logged in - Cannot track click');
            alert('Please log in to track clicks and get personalized suggestions');
            return;
        }
        if (!suggestion.id) {
            console.error('No product ID found in suggestion:', suggestion);
            return;
        }
        try {
            console.log(`Attempting to track product click for user: ${account}, product: ${suggestion.id}`); // Debug: Before POST
            await axios.post('http://localhost:8000/click', {
                userId: account,
                productId: suggestion.id
            });
            console.log('Product click tracked successfully'); // Debug: After successful POST
        } catch (e) {
            console.error('Click tracking failed:', e.response?.data || e.message); // Debug: Log full error
        }
        history.push(`/product/${suggestion.id}`);
    } else {
        // NEW: Track category/subcategory click
        if (account) {
            try {
                console.log(`Attempting to track category click for user: ${account}, category: ${suggestion.name}`); // Debug
                await axios.post('http://localhost:8000/click', {
                    userId: account,
                    category: suggestion.name  // Send the category/subcategory name
                });
                console.log('Category click tracked successfully');
            } catch (e) {
                console.error('Category click tracking failed:', e);
            }
        } else {
            console.warn('User not logged in - Skipping category track');
        }
        history.push(`/search?q=${encodeURIComponent(suggestion.name)}`);
    }
    clearSearch();
  };



  return (
    <Box className={classes.search}>
      <InputBase
        placeholder="Search for products, brands and more"
        classes={{ root: classes.inputRoot, input: classes.inputInput }}
        value={text}
        onChange={handleTextChange}
        onKeyDown={e => { if (e.key === 'Enter') handleSearch(); }}
        inputProps={{ 'aria-label': 'search' }}
      />
      <Box className={classes.searchIcon} onClick={handleSearch}><SearchIcon /></Box>
      {results.length > 0 && (
        <List className={classes.list}>
          {results.map((suggestion, index) => (
            <ListItem
              button
              key={index}
              onClick={() => onSuggestionClick(suggestion)}
              style={{ cursor: 'pointer' }}
            >
              {typeof suggestion === 'string' ? (
                <Typography>{suggestion}</Typography>
              ) : suggestion.type === 'product' ? (
                <Box>
                  <span dangerouslySetInnerHTML={{
                    __html: DOMPurify.sanitize(suggestion.title.longTitle)
                  }} />
                  <Typography
                    variant="body2"
                    style={{ marginLeft: 10, color: '#888', display: 'inline' }}
                  >
                    {suggestion.title.shortTitle}
                  </Typography>
                </Box>
              ) : (
                <span className={classes.suggestionCategory}>
                  {suggestion.name}
                  <span className={classes.suggestionType}>
                    {suggestion.type === 'category' ? 'in Category' : 'in Subcategory'}
                  </span>
                </span>
              )}
            </ListItem>
          ))}
          <ListItem disabled>
            <Typography variant="body2">
              View all results for "{text}"
            </Typography>
          </ListItem>
        </List>
      )}
    </Box>
  );
};


export default Search;
</file>

<file path="client/src/Components/Home/Banner.jsx">
import Carousel from 'react-material-ui-carousel'
import { makeStyles } from '@material-ui/core'
import { bannerData } from '../../constant/data';


const useStyle = makeStyles(theme => ({
    container: {
    },
    image: {
        width: '100%',
        height: 280,
        [theme.breakpoints.down('sm')]: {
            objectFit: 'cover',
            height: 180
        }
    }
}))

const Banner = () => {
    const classes = useStyle();
    return (
        <Carousel 
            autoPlay={true} 
            animation="slide" 
            indicators={false}
            navButtonsAlwaysVisible={true}
            cycleNavigation={true}
            className={classes.container}
            StylesProvider
            navButtonsProps={{ 
                style: {
                    color: '#494949',
                    backgroundColor: '#FFFFFF',
                    borderRadius: 0,
                    margin: 0,
                    width: 50,
                }
            }}
        >
            {
                bannerData.map(image => (
                    <img src={image} className={classes.image} alt="" />
                ))
            }
        </Carousel>
    )
}

export default Banner;
</file>

<file path="client/src/Components/Home/CategoryMenu.jsx">
import React, { useState, useEffect } from 'react';
import axios from 'axios';
import { Box, Typography, makeStyles } from '@material-ui/core';

const useStyles = makeStyles(theme => ({
  categoryRow: { /* your styles (horizontal, scrollable row) */ },
  categoryTab: { /* styles for each category tab */ },
  subcategoryDropdown: {
    position: 'absolute',
    background: '#fff',
    boxShadow: '0 2px 8px rgba(0,0,0,0.15)',
    borderRadius: '4px',
    padding: 8,
    marginTop: 8,
    zIndex: 1000,
    minWidth: 160,
  },
  subcategoryItem: {
    padding: '6px 12px',
    cursor: 'pointer',
    '&:hover': { backgroundColor: '#f0f0f0' }
  }
}));

const CategoryMenu = () => {
  const classes = useStyles();
  const [categories, setCategories] = useState([]);
  const [subcategories, setSubcategories] = useState([]);
  const [hoveredCategory, setHoveredCategory] = useState(null);

  useEffect(() => {
    axios.get('/api/categories')
      .then(res => setCategories(res.data))
      .catch(err => console.error('Failed to fetch categories', err));
  }, []);

  const handleCategoryHover = (category) => {
    setHoveredCategory(category);
    axios.get(`/api/categories/${encodeURIComponent(category)}/subcategories`)
      .then(res => setSubcategories(res.data))
      .catch(err => {
        setSubcategories([]);
        console.error('Failed to fetch subcategories', err);
      });
  };

  const handleCategoryLeave = () => {
    setHoveredCategory(null);
    setSubcategories([]);
  };

  return (
    <Box className={classes.categoryRow}>
      {categories.map(cat => (
        <Box
          key={cat}
          className={classes.categoryTab}
          onMouseEnter={() => handleCategoryHover(cat)}
          onMouseLeave={handleCategoryLeave}
          style={{ position: 'relative' }}
        >
          <Typography>{cat}</Typography>

          {/* Subcategory dropdown */} 
          {hoveredCategory === cat && subcategories.length > 0 && (
            <Box className={classes.subcategoryDropdown}>
              {subcategories.map(sub => (
                <Typography key={sub} className={classes.subcategoryItem}>
                  {sub}
                </Typography>
              ))}
            </Box>
          )}
        </Box>
      ))}
    </Box>
  );
};

export default CategoryMenu;
</file>

<file path="client/src/Components/Home/MidSection.jsx">
import { makeStyles, Grid } from '@material-ui/core';
import clsx from 'clsx';

const ImageURL = [
    'https://rukminim1.flixcart.com/flap/960/960/image/2f30db9425df5cec.jpg?q=50',
    'https://rukminim1.flixcart.com/flap/960/960/image/084789479074d2b2.jpg',
    'https://rukminim1.flixcart.com/flap/960/960/image/1ce0c4c1fb501b45.jpg?q=50'
];

const useStyle = makeStyles(theme => ({
    wrapper: {
        display: 'flex',
        marginTop: 20,
        justifyContent: 'space-between'
    },
    image: {
        width: '100%'
    },
    help: {
        [theme.breakpoints.down('md')]: {
            objectFit: 'cover',
            height: 120
        }
    }
}));

const MidSection = () => {
    const classes = useStyle();
    const url = 'https://rukminim1.flixcart.com/flap/3006/433/image/4789bc3aefd54494.jpg?q=50';
    return (
        <>
            <Grid lg={12} sm={12} md={12} xs={12} container className={classes.wrapper}>
                {
                    ImageURL.map(image => (
                        <Grid item lg={4} md={4} sm={12} xs={12}>
                            <img src={image} className={classes.image} alt="" />
                        </Grid>
                    ))
                }
            </Grid>
            <img src={url} className={clsx(classes.wrapper, classes.help)} style={{width: '100%'}} alt="" />
        </>
    )
}

export default MidSection;
</file>

<file path="client/src/Components/Home/MidSlide.jsx">
import { Box, makeStyles } from '@material-ui/core';
import Slide from './Slide';

const useStyle = makeStyles(theme => ({
    component: {
        display: 'flex'
    },
    leftComponent: {
        width: '83%',
        [theme.breakpoints.down('md')]: {
            width: '100%'
        }
    },
    rightComponent: {
        marginTop: 12,
        background: '#FFFFFF',
        width: '17%',
        marginLeft: 10,
        padding: 5,
        [theme.breakpoints.down('md')]: {
            display: 'none'
        }
    }
}));

const MidSlide = ({ products }) => {
    const classes = useStyle();
    const adURL = 'https://rukminim1.flixcart.com/flap/464/708/image/633789f7def60050.jpg?q=70';

    return (
        <Box className={classes.component}>
            <Box className={classes.leftComponent}>
                <Slide 
                    data={products} 
                    title='Deals of the Day'
                    timer={true} 
                    multi={true} 
                />
            </Box>
            <Box className={classes.rightComponent}>
                <img src={adURL} style={{width: 232}} alt="" />
            </Box>
        </Box>
    )
}

export default MidSlide;
</file>

<file path="client/src/Components/Home/NarBar.jsx">
import { Box, makeStyles, Typography } from '@material-ui/core';
import { navData } from '../../constant/data';

const useStyle = makeStyles(theme => ({
    component: {
        display: 'flex',
        justifyContent: 'space-between',
        margin: '55px 130px 0 130px',
        overflowX: 'overlay',
        [theme.breakpoints.down('md')]: {
            margin: 0
        }
    },
    container: {
        padding: '12px 8px',
        textAlign: 'center'
    },
    image: {
        width: 64
    },
    text: {
        fontSize: 14,
        fontWeight: 600,
        fontFamily: 'inherit'
    }
}));

const NavBar = () => {
    const classes = useStyle();
    return (
        <Box className={classes.component}>
            {
                navData.map(temp => (
                    <Box className={classes.container}>
                        <img src={temp.url} className={classes.image} alt="" />
                        <Typography className={classes.text}>{temp.text}</Typography>
                    </Box>
                ))
            }
        </Box>
    )
}

export default NavBar;
</file>

<file path="client/src/Components/Home/Slide.jsx">
import { Box, Typography, makeStyles, Button, Divider } from '@material-ui/core';
import Carousel from 'react-multi-carousel';
import "react-multi-carousel/lib/styles.css";
import Countdown from 'react-countdown';
import { Link } from 'react-router-dom';


const responsive = {
    desktop: {
        breakpoint: { max: 3000, min: 1024 },
        items: 5,
    },
    tablet: {
        breakpoint: { max: 1024, min: 464 },
        items: 2,
    },
    mobile: {
        breakpoint: { max: 464, min: 0 },
        items: 1,
    }
};

const useStyle = makeStyles(theme => ({
    component: {
        marginTop: 12,
        background: '#FFFFFF'
    }, 
    timer: {
        color: '#7f7f7f',
        marginLeft: 10,
        display: 'flex',
        alignItems: 'center',
        [theme.breakpoints.down('sm')]: {
            display: 'none'
        }
    },
    image: {
        width: 'auto',
        height: 150
    },
    text: {
        fontSize: 14,
        marginTop: 5
    },
    deal: {
        display: 'flex',
        padding: '15px 20px'
    },
    dealText: {
        fontSize: 22,
        fontWeight: 600,
        lineHeight: '32px',
        marginRight: 25
    },
    button: {
        marginLeft: 'auto',
        backgroundColor: '#2874f0',
        borderRadius: 2,
        fontSize: 13
    },
    wrapper: {
        padding: '25px 15px'
    },
    
}));

const MultiSlide = ({ data, timer, title }) => {
    const classes = useStyle();
    const timerURL = 'https://static-assets-web.flixcart.com/www/linchpin/fk-cp-zion/img/timer_a73398.svg';

    const renderer = ({ hours, minutes, seconds }) => {
        return <span className={classes.timer}>{hours} : {minutes} : {seconds}  Left</span>;
    };
    
    return (
        <Box className={classes.component}>
            <Box className={classes.deal}>
                <Typography className={classes.dealText}>{title}</Typography>
                {
                    timer && <Box className={classes.timer}>
                                <img src={timerURL} style={{ width: 24 }} alt='time clock' />
                                <Countdown date={Date.now() + 5.04e+7} renderer={renderer} />
                        </Box>
                }
                <Button variant="contained" color="primary" className={classes.button}>View All</Button>
            </Box>
            <Divider />
            <Carousel
                swipeable={false}
                draggable={false}
                responsive={responsive}
                centerMode={true}
                infinite={true}
                autoPlay={true}
                autoPlaySpeed={10000}
                keyBoardControl={true}
                showDots={false}
                containerClass="carousel-container"
                // removeArrowOnDeviceType={["tablet", "mobile"]}
                dotListClass="custom-dot-list-style"
                itemClass="carousel-item-padding-40-px"
            >
                {
                    data.map(temp => (
                        <Link to={`product/${temp.id}`} style={{textDecoration: 'none'}}>
                            <Box textAlign="center" className={classes.wrapper}>
                                <img src={temp.url} className={classes.image} alt="" />
                                <Typography className={classes.text} style={{ fontWeight: 600, color: '#212121' }}>{temp.title.shortTitle}</Typography>
                                <Typography className={classes.text} style={{ color: 'green' }}>{temp.discount}</Typography>
                                <Typography className={classes.text} style={{ color: '#212121', opacity: '.6' }}>{temp.tagline}</Typography>
                            </Box>
                        </Link>
                    ))
                }
            </Carousel>
        </Box>
    )
}

const Slide = (props) => {
    return (
        <>
            {
                props.multi === true ? <MultiSlide {...props} /> : ''      
            }
        </>
    )
}

export default Slide;
</file>

<file path="client/src/Components/ItemDetails/ActionItem.jsx">
import { useState, useContext } from 'react';
import { Button, Box, makeStyles } from '@material-ui/core';
import { ShoppingCart as Cart, FlashOn as Flash } from '@material-ui/icons';
import clsx from 'clsx';
import { useHistory } from 'react-router-dom';
import { LoginContext } from '../../context/ContextProvider';
import { addToCart } from '../../redux/actions/cartActions';
import { useDispatch } from 'react-redux';
import { loadRazorpay } from '../../razorpay/loadPayment';


const useStyle = makeStyles(theme => ({
    leftContainer: {
        minWidth: '40%',
        // textAlign: 'center',
        padding: '40px 0 0 80px',
        [theme.breakpoints.down('md')]: {
            padding: '20px 40px'
        }
    },
    productImage: {
        padding: '15px 20px',
        border: '1px solid #f0f0f0',
        width: '95%'
    },
    button: {
        width: '46%',
        borderRadius: 2,
        height: 50
    },
    addToCart: {
        background: '#ff9f00',
        color: '#FFF'
    },
    buyNow:{
        background: '#fb641b',
        color: '#FFF'
    }
}));

const ActionItem = ({ product }) => {
    const classes = useStyle();
    const history = useHistory();
    const dispatch = useDispatch();

    const buyNow = async () => {
       loadRazorpay(600);
    }

    const addItemToCart = () => {
        dispatch(addToCart(product.id, 1));
        history.push('/cart');
    }

    return (
        <Box className={classes.leftContainer}>
            <img src={product.detailUrl} className={classes.productImage} alt="" /><br />
            <Button onClick={() => addItemToCart()} className={clsx(classes.button, classes.addToCart)} style={{marginRight: 10}} variant="contained"><Cart />Add to Cart</Button>
            <Button onClick={() => buyNow()} className={clsx(classes.button, classes.buyNow)} variant="contained"><Flash /> Buy Now</Button>
        </Box>
    )
}

export default ActionItem;
</file>

<file path="client/src/Components/ItemDetails/DetailView.jsx">
import { useEffect } from 'react';
import { Box, Grid, makeStyles, Typography } from '@material-ui/core';
import { LocalOffer as Badge } from '@material-ui/icons';
import ProductDetail from './ProductDetail';
import ActionItem from './ActionItem';
import { useDispatch, useSelector } from 'react-redux';
import { getProductDetails } from '../../redux/actions/productActions';

const useStyles = makeStyles(theme => ({
    component: {
        marginTop: 55,
        background: '#F2F2F2'
    },
    container: {
        background: '#FFFFFF',
        margin: '0 80px',
        display: 'flex',
        [theme.breakpoints.down('md')]: {
            margin: 0
        }
    },
    rightContainer: {
        marginTop: 50,
        padding: '0 25px',
        '& > *': {
            marginTop: 10
        }
    },
    price: {
        fontSize: 28
    },
    smallText: {
        fontSize: 14,
    },
    greyTextColor: {
        color: '#878787'
    },
    badge: {
        marginRight: 10,
        color: '#00CC00',
        fontSize: 15
    }
}));

const DetailView = ({ match }) => {
    const classes = useStyles();
    const fassured = 'https://static-assets-web.flixcart.com/www/linchpin/fk-cp-zion/img/fa_62673a.png';
    
    // Get product data and loading status from Redux store
    const { loading, product } = useSelector(state => state.getProductDetails);
    const dispatch = useDispatch();
    
    useEffect(() => {
        if (match.params.id) {
            dispatch(getProductDetails(match.params.id));
        }
        console.log('DetailView looking for ID:', match.params.id);

    }, [dispatch, match.params.id]);

    console.log('Product data:', product); // Debug log
    console.log('Loading:', loading); // Debug log

    if (loading) {
        return (
            <Box className={classes.component}>
                <Typography style={{ padding: '50px', textAlign: 'center' }}>Loading...</Typography>
            </Box>
        );
    }

    if (!product || !Object.keys(product).length) {
        return (
            <Box className={classes.component}>
                <Typography style={{ padding: '50px', textAlign: 'center' }}>Product not found</Typography>
            </Box>
        );
    }

    return (
        <Box className={classes.component}>
            <Grid container className={classes.container}>
                <Grid item lg={4} md={4} sm={8} xs={12}>
                    <ActionItem product={product} />
                </Grid>
                <Grid item lg={8} md={8} sm={8} xs={12} className={classes.rightContainer}>
                    <Typography>{product.title?.longTitle || 'Product Title'}</Typography>
                    
                    <Typography style={{marginTop: 5, color: '#878787', fontSize: 14}}>
                        8 Ratings & 1 Reviews
                        <span><img src={fassured} style={{width: 77, marginLeft: 20}} alt="" /></span>
                    </Typography>
                    
                    <Typography>
                        <span className={classes.price}>₹{product.price?.cost}</span>&nbsp;&nbsp;&nbsp;
                        <span className={classes.greyTextColor}><strike>₹{product.price?.mrp}</strike></span>&nbsp;&nbsp;&nbsp;
                        <span style={{color: '#388E3C'}}>{product.price?.discount} off</span>
                    </Typography>
                    
                    <ProductDetail product={product} />
                </Grid>
            </Grid>
        </Box>
    )
}

export default DetailView;
</file>

<file path="client/src/Components/ItemDetails/ProductDetail.jsx">
import { Box, Typography, makeStyles, Table, TableBody, TableRow, TableCell } from '@material-ui/core';
import { LocalOffer as Badge } from '@material-ui/icons';

const useStyle = makeStyles({
    smallText: {
        fontSize: 14,
        verticalAlign: 'baseline',
        '& > *' :{
            fontSize: 14,
            marginTop: 10
        }
    },
    greyTextColor: {
        color: '#878787'
    },
    badge: {
        marginRight: 10,
        color: '#00CC00',
        fontSize: 15
    },
    wrapper: {
        display: 'flex'
    }
});

const ProductDetail = ({ product }) => {
    const classes = useStyle();
    const adURL = 'https://rukminim1.flixcart.com/lockin/774/185/images/CCO__PP_2019-07-14.png?q=50';
    const date = new Date(new Date().getTime()+(5*24*60*60*1000));
    
    return (
        <>
            <Typography>Available offers</Typography>
            <Box className={classes.smallText}>
                <Typography><Badge className={classes.badge} />Bank Offer 5% Unlimited Cashback on Flipkart Axis Bank Credit Card</Typography>
                <Typography><Badge className={classes.badge} />Bank Offer 10% Off on Bank of Baroda Mastercard debit card first time transaction, Terms and Condition apply</Typography>
                <Typography><Badge className={classes.badge} />Purchase this Furniture or Appliance and Get Extra ₹500 Off on Select ACs</Typography>
                <Typography><Badge className={classes.badge} />Partner OfferExtra 10% off upto ₹500 on next furniture purchase</Typography>
            </Box>
            <Table>
                <TableBody>
                    <TableRow className={classes.smallText}>
                        <TableCell className={classes.greyTextColor}>Delivery</TableCell>
                        <TableCell style={{ fontWeight: 600 }}>Delivery by {date.toDateString()} | ₹40</TableCell>
                    </TableRow>
                    <TableRow className={classes.smallText}>
                        <TableCell className={classes.greyTextColor}>Warranty</TableCell>
                        <TableCell>No Warranty</TableCell>
                    </TableRow>
                    <TableRow className={classes.smallText}>
                        <TableCell className={classes.greyTextColor}>Seller</TableCell>
                        <TableCell className={classes.smallText}>
                            <span style={{ color: '#2874f0' }}>SuperComNet</span>
                            <Typography>GST invoice available</Typography>
                            <Typography>View more sellers starting from ₹329</Typography>
                        </TableCell>
                    </TableRow>
                    <TableRow>
                        <TableCell colSpan={2}>
                            <img src={adURL} style={{ width: 390 }} alt="" />
                        </TableCell>
                    </TableRow>
                    <TableRow className={classes.smallText}>
                        <TableCell className={classes.greyTextColor}>Description</TableCell>
                        <TableCell>{product.description}</TableCell>
                    </TableRow>
                </TableBody>
            </Table>
        </>
    )
}

export default ProductDetail;
</file>

<file path="client/src/Components/Login/LoginDialog.jsx">
import React, { useState, useEffect } from 'react';
import { Dialog, DialogContent, TextField, Box, Button, makeStyles, Typography } from '@material-ui/core';
import { authenticateLogin, authenticateSignup } from '../../service/api';

const useStyle = makeStyles({
  component: {
    height: '70vh',
    width: '90vh',
    maxWidth: 'unset !important'
  },
  image: {
    backgroundImage: `url(${'https://static-assets-web.flixcart.com/www/linchpin/fk-cp-zion/img/login_img_c4a81e.png'})`,
    background: '#2874f0',
    backgroundPosition: 'center 85%',
    backgroundRepeat: 'no-repeat',
    height: '70vh',
    width: '40%',
    padding: '45px 35px',
    '& > *': {
      color: '#FFFFFF',
      fontWeight: 600
    }
  },
  login: {
    padding: '25px 35px',
    display: 'flex',
    flex: 1,
    flexDirection: 'column',
    '& > *': {
      marginTop: 20
    }
  },
  loginbtn: {
    textTransform: 'none',
    background: '#FB641B',
    color: '#fff',
    height: 48,
    borderRadius: 2
  },
  requestbtn: {
    textTransform: 'none',
    background: '#fff',
    color: '#2874f0',
    height: 48,
    borderRadius: 2,
    boxShadow: '0 2px 4px 0 rgb(0 0 0 / 20%)'
  },
  text: {
    color: '#878787',
    fontSize: 12
  },
  createText: {
    margin: 'auto 0 5px 0',
    textAlign: 'center',
    color: '#2874f0',
    fontWeight: 600,
    fontSize: 14,
    cursor: 'pointer'
  },
  error: {
    fontSize: 10,
    color: '#ff6161',
    lineHeight: 0,
    marginTop: 10,
    fontWeight: 600
  }
});

const loginInitialValues = {
  email: '',
  password: ''
};

const signupInitialValues = {
  firstname: '',
  lastname: '',
  username: '',
  email: '',
  password: '',
  phone: ''
};

const accountInitialValues = {
  login: {
    view: 'login',
    heading: 'Login',
    subHeading: 'Get access to your Orders, Wishlist and Recommendations'
  },
  signup: {
    view: 'signup',
    heading: "Looks like you're new here",
    subHeading: 'Signup to get started'
  }
};

const LoginDialog = ({ open, setOpen, setAccount }) => {
  const classes = useStyle();
  const [login, setLogin] = useState(loginInitialValues);
  const [signup, setSignup] = useState(signupInitialValues);
  const [error, showError] = useState(false);
  const [account, toggleAccount] = useState(accountInitialValues.login);

  useEffect(() => {
    showError(false);
  }, [login]);

  const onValueChange = (e) => {
    setLogin({ ...login, [e.target.name]: e.target.value });
  };

  const onInputChange = (e) => {
    setSignup({ ...signup, [e.target.name]: e.target.value });
  };

  const loginUser = async () => {
    let response = await authenticateLogin(login);
    if (!response || !response.data || !response.data.token) {
      showError(true);
      return;
    }
    showError(false);
    try {
      // UPDATED: Store full user object as JSON (ensure it's an object)
      const userData = {
        username: response.data.user.username, // Extract what you need
        // Add other fields if available, e.g., id: response.data.user.id
      };
      localStorage.setItem('token', response.data.token);
      localStorage.setItem('user', JSON.stringify(userData)); // Store as object
      console.log('Stored user in localStorage:', userData); // Debug log
      setAccount(userData.username);
      handleClose();
    } catch (err) {
      console.error('Error storing user:', err);
    }
  };

  const signupUser = async () => {
    try {
      let response = await authenticateSignup(signup);
      if (!response) throw new Error('No response from server');
      // UPDATED: Store full user object as JSON (ensure it's an object)
      const userData = {
        username: response.data.user.username || signup.username, // Fallback if response doesn't have it
        // Add other fields if available
      };
      localStorage.setItem('token', response.data.token);
      localStorage.setItem('user', JSON.stringify(userData)); // Store as object
      console.log('Stored user in localStorage:', userData); // Debug log
      setAccount(userData.username);
      handleClose();
    } catch (error) {
      if (error.response?.status === 409 || error.response?.status === 401) {
        alert(error.response.data.message || 'User already exists');
      } else {
        alert('Signup failed: ' + (error.message || 'Unknown error'));
      }
    }
  };

  const toggleSignup = () => {
    toggleAccount(accountInitialValues.signup);
  };

  const handleClose = () => {
    setOpen(false);
    toggleAccount(accountInitialValues.login);
  };

  return (
    <Dialog open={open} onClose={handleClose} maxWidth="md">
      <DialogContent className={classes.component}>
        <Box style={{ display: 'flex' }}>
          <Box className={classes.image}>
            <Typography variant="h5">{account.heading}</Typography>
            <Typography style={{ marginTop: 20 }}>{account.subHeading}</Typography>
          </Box>
          {account.view === 'login' ? (
            <Box className={classes.login}>
              <TextField onChange={onValueChange} name="email" label="Enter Email/Mobile number" />
              {error && <Typography className={classes.error}>Please enter valid Email ID/Mobile number</Typography>}
              <TextField onChange={onValueChange} name="password" label="Enter Password" />
              <Typography className={classes.text}>By continuing, you agree to Flipkart's Terms of Use and Privacy Policy.</Typography>
              <Button onClick={loginUser} className={classes.loginbtn}>Login</Button>
              <Typography className={classes.text} style={{ textAlign: 'center' }}>OR</Typography>
              <Button className={classes.requestbtn}>Request OTP</Button>
              <Typography className={classes.createText} onClick={toggleSignup}>New to Flipkart? Create an account</Typography>
            </Box>
          ) : (
            <Box className={classes.login}>
              <TextField onChange={onInputChange} name="firstname" label="Enter Firstname" />
              <TextField onChange={onInputChange} name="lastname" label="Enter Lastname" />
              <TextField onChange={onInputChange} name="username" label="Enter Username" />
              <TextField onChange={onInputChange} name="email" label="Enter Email" />
              <TextField onChange={onInputChange} name="password" label="Enter Password" />
              <TextField onChange={onInputChange} name="phone" label="Enter Phone" />
              <Button onClick={signupUser} className={classes.loginbtn}>Continue</Button>
            </Box>
          )}
        </Box>
      </DialogContent>
    </Dialog>
  );
};

export default LoginDialog;
</file>

<file path="client/src/Components/SearchResults/SearchResultsPage.jsx">
import React, { useState, useEffect } from 'react';
import { 
    Box, 
    Grid, 
    Typography, 
    makeStyles, 
    Card, 
    Chip,
    CircularProgress,
    FormControl,
    FormLabel,
    FormControlLabel,
    Checkbox,
    Slider,
    TextField,
    MenuItem,
    Select,
    Button,
    Accordion,
    AccordionSummary,
    AccordionDetails
} from '@material-ui/core';
import { useLocation, Link } from 'react-router-dom';
import { Star, ExpandMore } from '@material-ui/icons';
import axios from 'axios';

const useStyles = makeStyles(theme => ({
    container: {
        padding: '20px',
        background: '#f1f3f6',
        minHeight: '100vh',
        marginTop: 55
    },
    mainContent: {
        display: 'flex',
        gap: '20px'
    },
    filterSidebar: {
        width: '300px',
        background: '#fff',
        padding: '16px',
        borderRadius: '2px',
        alignSelf: 'flex-start',
        position: 'sticky',
        top: '75px',
        maxHeight: 'calc(100vh - 100px)',
        overflowY: 'auto'
    },
    resultsContainer: {
        flex: 1
    },
    searchHeader: {
        background: '#fff',
        padding: '16px 24px',
        marginBottom: '12px',
        borderRadius: '2px',
        boxShadow: '0 1px 3px 0 rgba(0,0,0,.1)'
    },
    resultsCount: {
        fontSize: '14px',
        color: '#878787'
    },
    searchTerm: {
        fontSize: '16px',
        fontWeight: 500,
        color: '#212121'
    },
    productCard: {
        background: '#fff',
        marginBottom: '12px',
        padding: '16px',
        cursor: 'pointer',
        transition: 'all 0.3s ease',
        border: '1px solid #f0f0f0',
        '&:hover': {
            boxShadow: '0 2px 8px 0 rgba(0,0,0,.12)',
            transform: 'translateY(-1px)'
        }
    },
    productImage: {
        width: '200px',
        height: '200px',
        objectFit: 'contain',
        [theme.breakpoints.down('sm')]: {
            width: '150px',
            height: '150px'
        }
    },
    productDetails: {
        padding: '0 16px',
        flex: 1
    },
    productTitle: {
        fontSize: '16px',
        fontWeight: 400,
        color: '#212121',
        lineHeight: '1.4',
        marginBottom: '8px',
        display: '-webkit-box',
        '-webkit-line-clamp': 2,
        '-webkit-box-orient': 'vertical',
        overflow: 'hidden'
    },
    ratingContainer: {
        display: 'flex',
        alignItems: 'center',
        marginBottom: '8px'
    },
    rating: {
        background: '#388e3c',
        color: '#fff',
        padding: '2px 6px',
        borderRadius: '3px',
        fontSize: '12px',
        fontWeight: 500,
        display: 'flex',
        alignItems: 'center',
        marginRight: '8px'
    },
    priceContainer: {
        display: 'flex',
        alignItems: 'center',
        marginBottom: '8px'
    },
    currentPrice: {
        fontSize: '16px',
        fontWeight: 500,
        color: '#212121',
        marginRight: '8px'
    },
    originalPrice: {
        fontSize: '14px',
        color: '#878787',
        textDecoration: 'line-through',
        marginRight: '8px'
    },
    discount: {
        fontSize: '14px',
        color: '#388e3c',
        fontWeight: 500
    },
    features: {
        fontSize: '14px',
        color: '#878787',
        lineHeight: '1.4'
    },
    loadingContainer: {
        display: 'flex',
        justifyContent: 'center',
        alignItems: 'center',
        height: '300px'
    },
    noResults: {
        textAlign: 'center',
        padding: '60px 20px',
        background: '#fff',
        borderRadius: '2px'
    },
    filterTitle: {
        fontSize: '14px',
        fontWeight: 600,
        marginBottom: '12px',
        color: '#212121'
    },
    priceSlider: {
        margin: '10px 0',
        color: '#2874f0'
    },
    priceInputs: {
        display: 'flex',
        gap: '10px',
        alignItems: 'center',
        marginTop: '10px'
    },
    priceInput: {
        width: '80px'
    },
    clearFilters: {
        marginTop: '20px',
        color: '#2874f0',
        borderColor: '#2874f0'
    },
    sortSelect: {
        minWidth: '200px',
        marginBottom: '16px'
    },
    sortContainer: {
        display: 'flex',
        justifyContent: 'space-between',
        alignItems: 'center',
        marginBottom: '16px'
    }
}));

const SearchResultsPage = () => {
    const classes = useStyles();
    const location = useLocation();
    const [products, setProducts] = useState([]);
    const [filteredProducts, setFilteredProducts] = useState([]);
    const [loading, setLoading] = useState(true);
    const [searchTerm, setSearchTerm] = useState('');

    // Filter states
    const [priceRange, setPriceRange] = useState([0, 100000]);
    const [selectedBrands, setSelectedBrands] = useState([]);
    const [selectedCategories, setSelectedCategories] = useState([]);
    const [minRating, setMinRating] = useState(0);
    const [sortBy, setSortBy] = useState('relevance');

    // Available filter options
    const [availableBrands, setAvailableBrands] = useState([]);
    const [availableCategories, setAvailableCategories] = useState([]);

    // Extract search query from URL parameters
    useEffect(() => {
        const urlParams = new URLSearchParams(location.search);
        const query = urlParams.get('q') || '';
        setSearchTerm(query);

        if (query) {
            fetchSearchResults(query);
        }
    }, [location.search]);

    const fetchSearchResults = async (query) => {
        setLoading(true);
        try {
            const userId = '123';
            const { data } = await axios.get(`http://localhost:8000/search?q=${query}&userId=${userId}`);
            
            // Get full product details for each search result
            const detailedProducts = await Promise.all(
                data.map(async (item) => {
                    try {
                        const productResponse = await axios.get(`http://localhost:8000/product/${item.id}`);
                        return productResponse.data;
                    } catch (error) {
                        console.error(`Error fetching product ${item.id}:`, error);
                        return null;
                    }
                })
            );

            const validProducts = detailedProducts.filter(product => product !== null);
            setProducts(validProducts);
            setFilteredProducts(validProducts);

            // Extract unique brands and categories
            const brands = [...new Set(validProducts.map(p => p.brand).filter(Boolean))];
            const categories = [...new Set(validProducts.map(p => p.category).filter(Boolean))];
            setAvailableBrands(brands);
            setAvailableCategories(categories);

            // Set price range based on products
            const prices = validProducts.map(p => p.price?.cost || 0).filter(p => p > 0);
            if (prices.length > 0) {
                const minPrice = Math.min(...prices);
                const maxPrice = Math.max(...prices);
                setPriceRange([minPrice, maxPrice]);
            }

        } catch (error) {
            console.error('Error fetching search results:', error);
            setProducts([]);
            setFilteredProducts([]);
        } finally {
            setLoading(false);
        }
    };

    // Apply filters whenever filter states change
    useEffect(() => {
        applyFilters();
    }, [products, priceRange, selectedBrands, selectedCategories, minRating, sortBy]);

    const applyFilters = () => {
        let filtered = [...products];

        // Price filter
        filtered = filtered.filter(product => {
            const price = product.price?.cost || 0;
            return price >= priceRange[0] && price <= priceRange[1];
        });

        // Brand filter
        if (selectedBrands.length > 0) {
            filtered = filtered.filter(product => 
                selectedBrands.includes(product.brand)
            );
        }

        // Category filter
        if (selectedCategories.length > 0) {
            filtered = filtered.filter(product => 
                selectedCategories.includes(product.category)
            );
        }

        // Rating filter
        if (minRating > 0) {
            filtered = filtered.filter(product => 
                (product.rating || 0) >= minRating
            );
        }

        // Sort products
        switch (sortBy) {
            case 'price-low-high':
                filtered.sort((a, b) => (a.price?.cost || 0) - (b.price?.cost || 0));
                break;
            case 'price-high-low':
                filtered.sort((a, b) => (b.price?.cost || 0) - (a.price?.cost || 0));
                break;
            case 'rating':
                filtered.sort((a, b) => (b.rating || 0) - (a.rating || 0));
                break;
            case 'discount':
                filtered.sort((a, b) => {
                    const discountA = parseFloat((a.price?.discount || '0%').replace('%', ''));
                    const discountB = parseFloat((b.price?.discount || '0%').replace('%', ''));
                    return discountB - discountA;
                });
                break;
            default:
                // Keep relevance order
                break;
        }

        setFilteredProducts(filtered);
    };

    const handleBrandChange = (brand) => {
        setSelectedBrands(prev => 
            prev.includes(brand) 
                ? prev.filter(b => b !== brand)
                : [...prev, brand]
        );
    };

    const handleCategoryChange = (category) => {
        setSelectedCategories(prev => 
            prev.includes(category) 
                ? prev.filter(c => c !== category)
                : [...prev, category]
        );
    };

    const clearAllFilters = () => {
        setPriceRange([0, 100000]);
        setSelectedBrands([]);
        setSelectedCategories([]);
        setMinRating(0);
        setSortBy('relevance');
    };

    const handleProductClick = async (productId) => {
        try {
            await axios.post('http://localhost:8000/click', {
                userId: '123',
                productId: productId
            });
        } catch (error) {
            console.error('Error tracking click:', error);
        }
    };

    if (loading) {
        return (
            <Box className={classes.container}>
                <Box className={classes.loadingContainer}>
                    <CircularProgress />
                </Box>
            </Box>
        );
    }

    return (
        <Box className={classes.container}>
            <Box className={classes.mainContent}>
                {/* Filter Sidebar */}
                <Box className={classes.filterSidebar}>
                    <Typography className={classes.filterTitle}>
                        FILTERS
                    </Typography>

                    <Button 
                        variant="outlined" 
                        size="small" 
                        className={classes.clearFilters}
                        onClick={clearAllFilters}
                    >
                        Clear All Filters
                    </Button>

                    {/* Price Filter */}
                    <Accordion defaultExpanded>
                        <AccordionSummary expandIcon={<ExpandMore />}>
                            <Typography className={classes.filterTitle}>PRICE</Typography>
                        </AccordionSummary>
                        <AccordionDetails style={{ flexDirection: 'column' }}>
                            <Slider
                                value={priceRange}
                                onChange={(_, newValue) => setPriceRange(newValue)}
                                valueLabelDisplay="auto"
                                min={0}
                                max={100000}
                                className={classes.priceSlider}
                                valueLabelFormat={(value) => `₹${value.toLocaleString()}`}
                            />
                            <Box className={classes.priceInputs}>
                                <TextField
                                    size="small"
                                    label="Min"
                                    type="number"
                                    value={priceRange[0]}
                                    onChange={(e) => setPriceRange([parseInt(e.target.value) || 0, priceRange[1]])}
                                    className={classes.priceInput}
                                />
                                <Typography>to</Typography>
                                <TextField
                                    size="small"
                                    label="Max"
                                    type="number"
                                    value={priceRange[1]}
                                    onChange={(e) => setPriceRange([priceRange[0], parseInt(e.target.value) || 100000])}
                                    className={classes.priceInput}
                                />
                            </Box>
                        </AccordionDetails>
                    </Accordion>

                    {/* Brand Filter */}
                    {availableBrands.length > 0 && (
                        <Accordion defaultExpanded>
                            <AccordionSummary expandIcon={<ExpandMore />}>
                                <Typography className={classes.filterTitle}>BRAND</Typography>
                            </AccordionSummary>
                            <AccordionDetails style={{ flexDirection: 'column' }}>
                                <FormControl component="fieldset">
                                    {availableBrands.map(brand => (
                                        <FormControlLabel
                                            key={brand}
                                            control={
                                                <Checkbox
                                                    checked={selectedBrands.includes(brand)}
                                                    onChange={() => handleBrandChange(brand)}
                                                    size="small"
                                                />
                                            }
                                            label={brand}
                                        />
                                    ))}
                                </FormControl>
                            </AccordionDetails>
                        </Accordion>
                    )}

                    {/* Category Filter */}
                    {availableCategories.length > 0 && (
                        <Accordion defaultExpanded>
                            <AccordionSummary expandIcon={<ExpandMore />}>
                                <Typography className={classes.filterTitle}>CATEGORY</Typography>
                            </AccordionSummary>
                            <AccordionDetails style={{ flexDirection: 'column' }}>
                                <FormControl component="fieldset">
                                    {availableCategories.map(category => (
                                        <FormControlLabel
                                            key={category}
                                            control={
                                                <Checkbox
                                                    checked={selectedCategories.includes(category)}
                                                    onChange={() => handleCategoryChange(category)}
                                                    size="small"
                                                />
                                            }
                                            label={category}
                                        />
                                    ))}
                                </FormControl>
                            </AccordionDetails>
                        </Accordion>
                    )}

                    {/* Rating Filter */}
                    <Accordion defaultExpanded>
                        <AccordionSummary expandIcon={<ExpandMore />}>
                            <Typography className={classes.filterTitle}>CUSTOMER RATING</Typography>
                        </AccordionSummary>
                        <AccordionDetails style={{ flexDirection: 'column' }}>
                            <FormControl component="fieldset">
                                {[4, 3, 2, 1].map(rating => (
                                    <FormControlLabel
                                        key={rating}
                                        control={
                                            <Checkbox
                                                checked={minRating === rating}
                                                onChange={() => setMinRating(minRating === rating ? 0 : rating)}
                                                size="small"
                                            />
                                        }
                                        label={`${rating}★ & above`}
                                    />
                                ))}
                            </FormControl>
                        </AccordionDetails>
                    </Accordion>
                </Box>

                {/* Results Container */}
                <Box className={classes.resultsContainer}>
                    {/* Search Header */}
                    <Box className={classes.searchHeader}>
                        <Box className={classes.sortContainer}>
                            <Box>
                                <Typography className={classes.searchTerm}>
                                    Search results for "{searchTerm}"
                                </Typography>
                                <Typography className={classes.resultsCount}>
                                    {filteredProducts.length} results found
                                </Typography>
                            </Box>
                            <FormControl size="small" className={classes.sortSelect}>
                                <Select
                                    value={sortBy}
                                    onChange={(e) => setSortBy(e.target.value)}
                                    displayEmpty
                                >
                                    <MenuItem value="relevance">Sort by Relevance</MenuItem>
                                    <MenuItem value="price-low-high">Price: Low to High</MenuItem>
                                    <MenuItem value="price-high-low">Price: High to Low</MenuItem>
                                    <MenuItem value="rating">Customer Rating</MenuItem>
                                    <MenuItem value="discount">Discount</MenuItem>
                                </Select>
                            </FormControl>
                        </Box>
                    </Box>

                    {/* Active Filters */}
                    {(selectedBrands.length > 0 || selectedCategories.length > 0 || minRating > 0) && (
                        <Box style={{ marginBottom: '12px' }}>
                            {selectedBrands.map(brand => (
                                <Chip
                                    key={brand}
                                    label={`Brand: ${brand}`}
                                    onDelete={() => handleBrandChange(brand)}
                                    style={{ margin: '4px' }}
                                    size="small"
                                />
                            ))}
                            {selectedCategories.map(category => (
                                <Chip
                                    key={category}
                                    label={`Category: ${category}`}
                                    onDelete={() => handleCategoryChange(category)}
                                    style={{ margin: '4px' }}
                                    size="small"
                                />
                            ))}
                            {minRating > 0 && (
                                <Chip
                                    label={`Rating: ${minRating}★ & above`}
                                    onDelete={() => setMinRating(0)}
                                    style={{ margin: '4px' }}
                                    size="small"
                                />
                            )}
                        </Box>
                    )}

                    {/* Search Results */}
                    {filteredProducts.length > 0 ? (
                        <Grid container spacing={0}>
                            {filteredProducts.map((product) => (
                                <Grid item xs={12} key={product.id || product._id}>
                                    <Link 
                                        to={`/product/${product.id || product._id}`} 
                                        style={{ textDecoration: 'none' }}
                                        onClick={() => handleProductClick(product.id || product._id)}
                                    >
                                        <Card className={classes.productCard} elevation={0}>
                                            <Box display="flex">
                                                {/* Product Image */}
                                                <Box>
                                                    <img 
                                                        src={product.url} 
                                                        alt={product.title?.longTitle}
                                                        className={classes.productImage}
                                                    />
                                                </Box>

                                                {/* Product Details */}
                                                <Box className={classes.productDetails}>
                                                    <Typography className={classes.productTitle}>
                                                        {product.title?.longTitle}
                                                    </Typography>

                                                    {/* Rating */}
                                                    <Box className={classes.ratingContainer}>
                                                        <Box className={classes.rating}>
                                                            <Star style={{ fontSize: '12px', marginRight: '2px' }} />
                                                            {product.rating || 4.2}
                                                        </Box>
                                                        <Typography className={classes.reviewCount}>
                                                            (1,234 reviews)
                                                        </Typography>
                                                    </Box>

                                                    {/* Price */}
                                                    <Box className={classes.priceContainer}>
                                                        <Typography className={classes.currentPrice}>
                                                            ₹{product.price?.cost?.toLocaleString('en-IN')}
                                                        </Typography>
                                                        <Typography className={classes.originalPrice}>
                                                            ₹{product.price?.mrp?.toLocaleString('en-IN')}
                                                        </Typography>
                                                        <Typography className={classes.discount}>
                                                            {product.price?.discount} off
                                                        </Typography>
                                                    </Box>

                                                    {/* Features */}
                                                    <Typography className={classes.features}>
                                                        {product.description ? 
                                                            product.description.substring(0, 150) + '...' : 
                                                            'No description available'
                                                        }
                                                    </Typography>

                                                    {/* Brand */}
                                                    {product.brand && (
                                                        <Box mt={1}>
                                                            <Chip 
                                                                label={product.brand} 
                                                                size="small" 
                                                                style={{ 
                                                                    background: '#e3f2fd', 
                                                                    color: '#1976d2',
                                                                    fontSize: '11px'
                                                                }} 
                                                            />
                                                        </Box>
                                                    )}
                                                </Box>
                                            </Box>
                                        </Card>
                                    </Link>
                                </Grid>
                            ))}
                        </Grid>
                    ) : (
                        <Box className={classes.noResults}>
                            <Typography variant="h6" gutterBottom>
                                No products found
                            </Typography>
                            <Typography color="textSecondary">
                                Try adjusting your search terms or filters
                            </Typography>
                        </Box>
                    )}
                </Box>
            </Box>
        </Box>
    );
};

export default SearchResultsPage;
</file>

<file path="client/src/Components/default.js">
// export { default as Cart } from './Cart';
export { default as Home } from './Home';
export { default as Product } from './Product';
// export { default as Header} from './Header';
export { default as NotFound } from './NotFound';
</file>

<file path="client/src/Components/Home.jsx">
import { Box, makeStyles } from '@material-ui/core';
import { useHistory } from 'react-router-dom';
import NavBar from './Home/NarBar';
import Banner from './Home/Banner';
import MidSlide from './Home/MidSlide';
import MidSection from './Home/MidSection';
import Slide from './Home/Slide';
import React, { useEffect } from 'react';
import { useSelector, useDispatch } from 'react-redux'; // hooks
import { getProducts as listProducts } from '../redux/actions/productActions';
import CategoryMenu from "./Home/CategoryMenu";

const useStyle = makeStyles({
    component: {
        padding: 10,
        background: '#F2F2F2'
    }
});

const Home = () => {
    const classes = useStyle();

    const getProducts = useSelector(state => state.getProducts);
    const { products } = getProducts;

    const dispatch = useDispatch();
    const history = useHistory();

    const handleCategoryClick = (cat) => {
        history.push(`/search?q=${encodeURIComponent(cat)}`);
    };

    useEffect(() => {
        dispatch(listProducts())
    }, [dispatch])

    return (
        <> 
            <NavBar />
            <CategoryMenu onCategoryClick={handleCategoryClick} />
            <Box className={classes.component}>
                <Banner />
                <MidSlide products={products} />
                <MidSection />
                <Slide
                    data={products} 
                    title='Discounts for You'
                    timer={false} 
                    multi={true} 
                />
                <Slide
                    data={products} 
                    title='Suggested Items'
                    timer={false} 
                    multi={true} 
                />
                <Slide
                    data={products} 
                    title='Top Selection'
                    timer={false} 
                    multi={true} 
                />
                <Slide
                    data={products} 
                    title='Recommended Items'
                    timer={false} 
                    multi={true} 
                />
            </Box>
        </>
    )
}

export default Home;
</file>

<file path="client/src/Components/NotFound.jsx">
const NotFound = () => {
    return (
        <p>Not Found! 404</p>
    )
}

export default NotFound;
</file>

<file path="client/src/Components/Product.jsx">
const Product = () => {
    return (
        <p>Hi from Product</p>
    )
}

export default Product;
</file>

<file path="client/src/constant/data.js">
export const navData = [
    { url: 'https://rukminim1.flixcart.com/flap/128/128/image/f15c02bfeb02d15d.png?q=100', text: 'Top Offers' },
    { url: 'https://rukminim1.flixcart.com/flap/128/128/image/29327f40e9c4d26b.png?q=100', text: 'Grocery' },
    { url: 'https://rukminim1.flixcart.com/flap/128/128/image/22fddf3c7da4c4f4.png?q=100', text: 'Mobile' },
    { url: 'https://rukminim1.flixcart.com/flap/128/128/image/82b3ca5fb2301045.png?q=100', text: 'Fashion' },
    { url: 'https://rukminim1.flixcart.com/flap/128/128/image/69c6589653afdb9a.png?q=100', text: 'Electronics' },
    { url: 'https://rukminim1.flixcart.com/flap/128/128/image/ee162bad964c46ae.png?q=100', text: 'Home' },
    { url: 'https://rukminim1.flixcart.com/flap/128/128/image/0ff199d1bd27eb98.png?q=100', text: 'Appliances' },
    { url: 'https://rukminim1.flixcart.com/flap/128/128/image/71050627a56b4693.png?q=100', text: 'Travel' },
    { url: 'https://rukminim1.flixcart.com/flap/128/128/image/dff3f7adcf3a90c6.png?q=100', text: 'Beauty, Toys & More' }
];

export const bannerData = [
    'https://rukminim1.flixcart.com/flap/3376/560/image/d117a62eb5fbb8e1.jpg?q=50',
    'https://rukminim1.flixcart.com/flap/3376/560/image/57267a180af306fe.jpg?q=50',
    'https://rukminim1.flixcart.com/flap/3376/560/image/ae9966569097a8b7.jpg?q=50',
    'https://rukminim1.flixcart.com/flap/3376/560/image/f6202f13b6f89b03.jpg?q=50'
]

export const dealData = [
    { 
        id: 'product1',
        url: 'https://rukminim1.flixcart.com/image/200/200/khf63680/cases-covers/back-cover/d/7/g/spigen-acs02256-original-imafxfgbffqaugur.jpeg?q=70', 
        detailUrl: '',
        title: {
            shortTitle: 'Mobile Covers'
        }, 
        discount: 'Extra 10% Off', 
        tagline: 'Deal of the day' 
    },
    { 
        id: 'product2',
        url: 'https://rukminim1.flixcart.com/image/200/200/k5lcvbk0/moisturizer-cream/9/w/g/600-body-lotion-aloe-hydration-for-normal-skin-nivea-lotion-original-imafz8jb3ftt8gf9.jpeg?q=70', 
        title: {
            shortTitle: 'Skin & Hair Care'
        },
        discount: 'From 99+5% Off', 
        tagline: 'Shampoos, Face Washes & More' 
    },
    { 
        id: 'product3',
        url: 'https://rukminim1.flixcart.com/flap/200/200/image/74bc985c62f19245.jpeg?q=70', 
        title: {
            shortTitle: 'Skybags & Safari'
        }, 
        discount: 'Upto 70% Off', 
        tagline: 'Deal of the Day' 
    },
    { 
        id: 'product4',
        url: 'https://rukminim1.flixcart.com/image/300/300/kll7bm80/smartwatch/c/1/n/43-mo-sw-sense-500-android-ios-molife-original-imagyzyycnpujyjh.jpeg?q=70', 
        detailUrl: 'https://rukminim1.flixcart.com/image/416/416/kll7bm80/smartwatch/c/1/n/43-mo-sw-sense-500-android-ios-molife-original-imagyzyycnpujyjh.jpeg?q=70',
        title: {
            shortTitle: 'Smart Watches',
            longTitle: 'Molife Sense 500 Smartwatch  (Black Strap, Freesize)',
        }, 
        price: {
            mrp: 6999,
            cost: 4049,
            discount: '42%'
        },
        description: 'The Molife Sense 500, a brilliant smartwatch with a beautiful large display. Say hello to the infinity 1.7-inch display with 2.5D curved edges. Thanks to seamless Bluetooth 5.0 connectivity, you wont have to keep waiting. Bring a change to your outfit every day with changeable straps. A splash of color every day keeps the boredom away.',
        discount: 'Grab Now', 
        tagline: 'Best Seller' 
    },
    { 
        id: 'product5',
        url: 'https://rukminim1.flixcart.com/flap/150/150/image/b616a7aa607d3be0.jpg?q=70', 
        title: {
            shortTitle: 'Sports & Fitness Essentials'
        }, 
        discount: 'Upto 80% Off', 
        tagline: 'Ab Exerciser, Yoga & more' 
    }
];

export const furnitureData = [
    { 
        url: 'https://rukminim1.flixcart.com/image/300/300/ke7ff680/hammock-swing/j/f/u/q3-jkaf-y3l0-furniture-kart-original-imafux96kpy7grch.jpeg?q=70', 
        title: {
            shortTitle: 'Hammock And Swings'
        }, 
        discount: 'From ₹199', 
        tagline: 'Trendy Collection' 
    },
    { 
        url: 'https://rukminim1.flixcart.com/image/300/300/bean-bag/h/v/b/f8-the-furniture-store-xxxl-original-imae65d3wg7qzpkn.jpeg?q=70', 
        title: {
            shortTitle: 'Bean Bag Covers'
        }, 
        discount: 'Min 80% Off', 
        tagline: 'XL, XXL & More' 
    },
    { 
        url: 'https://rukminim1.flixcart.com/image/300/300/jlcmavk0/aquarium-tank/s/4/5/usb-desktop-aquarium-with-running-water-calendar-temperature-and-original-imaf8hv4nkv55gx8.jpeg?q=70', 
        title: {
            shortTitle: 'Aquarium Tank'
        }, 
        discount: 'From ₹299', 
        tagline: 'Flat, Round, Cube & More' 
    },
    { 
        url: 'https://rukminim1.flixcart.com/image/300/300/jffpoy80/office-study-chair/v/v/z/pp-am-5001cb-apex-original-imaf3u8rbr5cdycv.jpeg?q=70', 
        title: {
            shortTitle: 'Office & Study Chairs'
        }, 
        discount: 'Min 50% Off', 
        tagline: 'Fabric & Leatherette' 
    },
    { 
        url: 'https://rukminim1.flixcart.com/image/300/300/jvcp9jk0/recliner/z/w/x/brown-top-grain-leather-sf7018011-1-royaloak-original-imafg9s9hh9vzpf3.jpeg?q=70', 
        title: {
            shortTitle: 'Recliner'
        }, 
        discount: 'From ₹4999', 
        tagline: 'Bantia, RoyalOak & More' 
    },
    { 
        url: 'https://rukminim1.flixcart.com/image/300/300/jlqwpe80-1/tv-entertainment-unit/d/t/f/particle-board-holland-tv-unit-black-forzza-black-original-imaf8t5ybywcdtys.jpeg?q=70', 
        title: {
            shortTitle: 'Tv Units'
        }, 
        discount: 'From ₹2100', 
        tagline: 'Forzza, Zuari & more' 
    },
    { 
        url: 'https://rukminim1.flixcart.com/image/300/300/inflatable-sofa/6/j/s/wsb031a-velvet-wds-original-imaeaphzbkgrz3xp.jpeg?q=70', 
        title: {
            shortTitle: 'Inflatable Sofas'
        }, 
        discount: 'Min 50% Off', 
        tagline: 'Furn Central & more' 
    },
];
</file>

<file path="client/src/context/ContextProvider.jsx">
import { createContext, useState, useEffect } from 'react';

export const LoginContext = createContext(null);

const ContextProvider = ({ children }) => {
  const [account, setAccount] = useState(null); // Start as null

  // UPDATED: Load from localStorage on mount with error handling
  useEffect(() => {
    const storedUser = localStorage.getItem('user');
    if (storedUser) {
      try {
        const parsedUser = JSON.parse(storedUser); // Expecting a JSON object
        setAccount(parsedUser.username); // Extract username
        console.log('Restored user from localStorage:', parsedUser.username); // Debug log
      } catch (error) {
        console.error('Error parsing stored user:', error);
        localStorage.removeItem('user'); // Clear invalid data
        setAccount(null);
      }
    }
  }, []);

  // Expose a logout function to clear storage
  const logout = () => {
    localStorage.removeItem('token');
    localStorage.removeItem('user');
    setAccount(null);
  };

  return (
    <LoginContext.Provider value={{ account, setAccount, logout }}>
      {children}
    </LoginContext.Provider>
  );
};

export default ContextProvider;
</file>

<file path="client/src/razorpay/loadPayment.js">
import axios from 'axios';
const url = 'http://localhost:8000';

export const loadRazorpay=(price)=> {
    const orderAmount=price+"00";
    const script = document.createElement('script');
    script.src = 'https://checkout.razorpay.com/v1/checkout.js';
    script.onerror = () => {
      alert('Razorpay SDK failed to load. Are you online?');
    };
    script.onload = async () => {
      try {
        const result = await axios.post(`${url}/create-order`, {
          amount: orderAmount,
        });
        const { id: order_id, currency } = result.data;
        const {
          data: { key: razorpayKey },
        } = await axios.get(`${url}/get-razorpay-key`);
 
        const options = {
          key: razorpayKey,
          amount: orderAmount.toString(),
          currency: currency,
          name: 'example name',
          description: 'example transaction',
          order_id: order_id,
          handler: async function (response) {
            const result = await axios.post(`${url}/pay-order`, {
              amount: orderAmount,
              razorpayPaymentId: response.razorpay_payment_id,
              razorpayOrderId: response.razorpay_order_id,
              razorpaySignature: response.razorpay_signature,
            });
            //console.log(response);
            alert(result.data.msg);
            //fetchOrders();
          },
          prefill: {
            name: 'example name',
            email: 'email@example.com',
            contact: '111111',
          },
          notes: {
            address: 'example address',
          },
          theme: {
            color: '#80c0f0',
          },
        };  
        const paymentObject = new window.Razorpay(options);
        paymentObject.open();
      } catch (err) {
        alert(err);
      }
    };
    document.body.appendChild(script);
  }
</file>

<file path="client/src/razorpay/razorpay.js">
import axios from 'axios';
import React, { useEffect, useState } from 'react';

function Razorpay() {
  const [loading, setLoading] = useState(false);
  const [orderAmount, setOrderAmount] = useState(0);
  const [orders, setOrders] = useState([]);

  const url = 'http://localhost:8000';

  async function fetchOrders() {
    const { data } = await axios.get(`${url}/pay-res`);
    setOrders(data);
    console.log(orders);
  }
  useEffect(() => {
    fetchOrders();
  }, []);

  const loadRazorpay=()=> {
    const script = document.createElement('script');
    script.src = 'https://checkout.razorpay.com/v1/checkout.js';
    script.onerror = () => {
      alert('Razorpay SDK failed to load. Are you online?');
    };
    script.onload = async () => {
      try {
        setLoading(true);
        const result = await axios.post(`${url}/create-order`, {
          amount: orderAmount,
        });
        const { amount, id: order_id, currency } = result.data;
        const {
          data: { key: razorpayKey },
        } = await axios.get(`${url}/get-razorpay-key`);
 
        const options = {
          key: razorpayKey,
          amount: orderAmount.toString(),
          currency: currency,
          name: 'example name',
          description: 'example transaction',
          order_id: order_id,
          handler: async function (response) {
            const result = await axios.post(`${url}/pay-order`, {
              amount: orderAmount,
              razorpayPaymentId: response.razorpay_payment_id,
              razorpayOrderId: response.razorpay_order_id,
              razorpaySignature: response.razorpay_signature,
            });
            console.log(response);
            alert(result.data.msg);
            fetchOrders();
          },
          prefill: {
            name: 'example name',
            email: 'email@example.com',
            contact: '111111',
          },
          notes: {
            address: 'example address',
          },
          theme: {
            color: '#80c0f0',
          },
        };

        setLoading(false);
        const paymentObject = new window.Razorpay(options);
        paymentObject.open();
      } catch (err) {
        alert(err);
        setLoading(false);
      }
    };
    document.body.appendChild(script);
  }

  return (
    <div className="App">
      <h1> Razorpay Example: Node & React</h1>
      <hr />
      <div>
        <h2> Pay Order</h2>
        <label>
          Amount:{' '}
          <input
            placeholder="INR"
            type="number"
            value={orderAmount}
            onChange={(e) => setOrderAmount(e.target.value)}
          ></input>
        </label>

        <button disabled={loading} onClick={loadRazorpay}>
          Razorpay
        </button>
        {loading && <div>Loading...</div>}
      </div>
      <div className="list-orders">
        <h2>List Orders</h2>
        <table>
          <thead>
            <tr>
              <th>ID</th>
              <th>AMOUNT</th>
              <th>ISPAID</th>
              <th>RAZORPAY</th>
            </tr>
          </thead>
          <tbody>
            {orders.map((x) => (
              <tr key={x._id}>
                <td>{x._id}</td>
                <td>{x.amount / 100}</td>
                <td>{x.isPaid ? 'YES' : 'NO'}</td>
                {/* <td>{x.razorpay.paymentId}</td> */}
              </tr>
            ))}
          </tbody>
        </table>
      </div>
    </div>
  );
}

export default Razorpay;
</file>

<file path="client/src/reducers/reducer.js">
export const initialState = {
    addToCart: {}
}


export const reducer = (state, action) => {
    switch (action.type) {
        case 'addToCart' : 
            let a =  { ...state, [action.type]: action.value };
            console.log(a)
            return a;
        case 'reset': 
            return initialState;
        default: 
            return state;
    }
}
</file>

<file path="client/src/redux/actions/cartActions.js">
import * as actionTypes from '../constants/cartConstants';
import axios from 'axios';

export const addToCart = (id, quantity) => async (dispatch, getState) => {
    try { 
        const { data } = await axios.get(`http://localhost:8000/product/${id}`);

        dispatch({ type: actionTypes.ADD_TO_CART, payload: { ...data, quantity } });

        localStorage.setItem('cart', JSON.stringify(getState().cart.cartItems))
    } catch (error) {
        console.log('Error while calling cart API');
    }
};

export const removeFromCart = (id) => (dispatch, getState) => {
    console.log(id);
    dispatch({
        type: actionTypes.REMOVE_FROM_CART,
        payload: id
    })

    localStorage.setItem('cart', JSON.stringify(getState().cart.cartItems));
};
</file>

<file path="client/src/redux/actions/productActions.js">
import * as actionTypes from '../constants/productConstant';
import axios from 'axios';

export const getProducts = () => async (dispatch) => {
    try {
        console.log('Fetching products...')
        const { data } = await axios.get(`http://localhost:8000/products`);
        
        // Add id field to each product for consistency
        const productsWithId = data.map(product => ({
            ...product,
            id: product.id || product._id // Use existing id or fallback to _id
        }));
        
        dispatch({ type: actionTypes.GET_PRODUCTS_SUCCESS, payload: productsWithId });
    } catch (error) {
        dispatch({ type: actionTypes.GET_PRODUCTS_FAIL, payload: error.response });
    }
};

export const getProductDetails = (id) => async (dispatch) => {
    try {
        dispatch({ type: actionTypes.GET_PRODUCT_DETAILS_REQUEST });
        console.log('Fetching product details for ID:', id);
        
        const { data } = await axios.get(`http://localhost:8000/product/${id}`);
        console.log('Product details response:', data);

        if (data) {
            // Ensure the product has an id field
            const productWithId = {
                ...data,
                id: data.id || data._id
            };
            dispatch({ type: actionTypes.GET_PRODUCT_DETAILS_SUCCESS, payload: productWithId });
        } else {
            dispatch({ type: actionTypes.GET_PRODUCT_DETAILS_FAIL, payload: 'Product not found' });
        }
    } catch (error) {
        console.error('Error fetching product details:', error);
        dispatch({ type: actionTypes.GET_PRODUCT_DETAILS_FAIL, payload: error.response?.data || error.message});
    }
};
</file>

<file path="client/src/redux/constants/cartConstants.js">
export const ADD_TO_CART = "addToCart"
export const REMOVE_FROM_CART = "removeFromCart"
export const CART_RESET = "cartReset"
</file>

<file path="client/src/redux/constants/productConstant.js">
export const GET_PRODUCTS_SUCCESS = 'getProductsSuccess'
export const GET_PRODUCTS_FAIL = 'getProductsFail'


export const GET_PRODUCT_DETAILS_REQUEST = 'getProductDetailsRequest'
export const GET_PRODUCT_DETAILS_SUCCESS = 'getProductDetailSuccess'
export const GET_PRODUCT_DETAILS_FAIL = 'getProductDetailFail'
export const GET_PRODUCT_DETAILS_RESET = 'getProductDetailReset'
</file>

<file path="client/src/redux/reducers/cartReducer.js">
import * as actionTypes from '../constants/cartConstants';

export const cartReducer = (state = { cartItems: []}, action) => {
    console.log('Heyya',    action.type);
    switch(action.type) {
        case actionTypes.ADD_TO_CART:
            const item = action.payload;

            const existItem = state.cartItems.find(product => product.id === item.id);
            console.log(existItem)
            console.log(item);
            console.log(state.cartItems)

           if(existItem){
            return {
                ...state, 
                // FIX: Compare by item ID (x.id === item.id)
                cartItems: state.cartItems.map(x => x.id === item.id ? item : x)
            }
            } else {
                let a =  { ...state, cartItems: [...state.cartItems, item]}
                console.log(a)
                return a;
            }
        case actionTypes.REMOVE_FROM_CART:
            console.log(state.cartItems)
            console.log(action.payload);
            let s =  {
                ...state, cartItems: state.cartItems.filter(product => product.id !== action.payload)
            }
            console.log(s);
            return s;

        default:
            return state;
    }
}
</file>

<file path="client/src/redux/reducers/productReducer.js">
import * as actionTypes from '../constants/productConstant';


export const getProductReducer = (state = {products: []}, action) => {
    switch(action.type) {
        case actionTypes.GET_PRODUCTS_SUCCESS:
            return { products: action.payload }
        case actionTypes.GET_PRODUCTS_FAIL:
            return { error: action.payload }
        default:
            return state
    }
};

export const getProductDetailsReducer = (state = { product: {}}, action) => {
    
    console.log('Hi', action.type)
    switch(action.type){
        case actionTypes.GET_PRODUCT_DETAILS_REQUEST:
            return { loading: true }
        case actionTypes.GET_PRODUCT_DETAILS_SUCCESS:
            return { loading: false, product: action.payload }
        case actionTypes.GET_PRODUCT_DETAILS_FAIL:
            return {
                loading: false,
                error: action.payload
            }
        case actionTypes.GET_PRODUCT_DETAILS_RESET: 
            return {
                product: {}
            }
        default:
            return state
    }
}
</file>

<file path="client/src/redux/store.js">
import { createStore, applyMiddleware, combineReducers } from 'redux';
import thunk from 'redux-thunk';
import { composeWithDevTools } from 'redux-devtools-extension';

import { cartReducer } from './reducers/cartReducer';
import { getProductDetailsReducer, getProductReducer } from './reducers/productReducer';

const reducer = combineReducers({
    cart: cartReducer,
    getProducts: getProductReducer,
    getProductDetails: getProductDetailsReducer
})


const middleware = [thunk];

const store = createStore(
    reducer, 
    composeWithDevTools(applyMiddleware(...middleware))
);

export default store;
</file>

<file path="client/src/service/api.js">
import axios from 'axios';

const url = 'http://localhost:8000';

export const authenticateLogin = async (user) => {
    try {
        return  await axios.post(`${url}/login`, user) 
    } catch (error) {
        console.log('error while calling login API: ', error);
    }
}

export const authenticateSignup = async (user) => {
    try {
        return await axios.post(`${url}/signup`, user)
    } catch (error) {
        console.log('error while calling Signup API: ', error);
    }
}

export const getProductById = async (id) => {
    try {
        return await axios.get(`${url}/product/${id}`);
    } catch (error) {
        console.log('Error while getting product by id response', error);
    }
}

export  const payUsingPaytm = async (data) => {
    try {
        console.log('payment api');
        let response = await axios.post(`${url}/payment`, data);
        console.log(response.data);
        return response.data;
    } catch (error) {
        console.log('error', error);
    }
}
</file>

<file path="client/src/templates/TemplateProvider.js">
import React from 'react';
import { CssBaseline } from "@material-ui/core";
import { ThemeProvider, createMuiTheme } from "@material-ui/core/styles";

const TemplateContext = React.createContext(null);

export const TemplateProvider = ({ children }) => {
    const theme = createMuiTheme({
        overrides: {
            MuiDialog: {
                paperWidthSm: {
                    maxWidth: 'unset'
                }
            },
            MuiDialogContent: {
                root: {
                    padding: 0,
                    '&:first-child': {
                        paddingTop: 0
                    }
                }
            },
            MuiTableCell: {
                root: {
                    borderBottom: 0
                }
            }
        }
    });

    return (
        <TemplateContext.Provider>
            <ThemeProvider theme={theme}>
                <CssBaseline />
                {children}
            </ThemeProvider>
        </TemplateContext.Provider>
    );
}

export default TemplateProvider;
</file>

<file path="client/src/App.css">
.App {
  text-align: center;
}

.App-logo {
  height: 40vmin;
  pointer-events: none;
}

@media (prefers-reduced-motion: no-preference) {
  .App-logo {
    animation: App-logo-spin infinite 20s linear;
  }
}

.App-header {
  background-color: #282c34;
  min-height: 100vh;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  font-size: calc(10px + 2vmin);
  color: white;
}

.App-link {
  color: #61dafb;
}

@keyframes App-logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}
</file>

<file path="client/src/App.js">
import React, { Suspense, lazy } from 'react';
import { BrowserRouter, Switch, Route } from 'react-router-dom';
import Header from './Components/Header/Header';
import TemplateProvider from './templates/TemplateProvider';
import ContextProvider from './context/ContextProvider';
import { Box, Typography } from '@material-ui/core';
import { Provider } from 'react-redux';
import store from './redux/store';

// Lazy load all major components
const Home = lazy(() => import('./Components/Home'));
const Cart = lazy(() => import('./Components/Cart/Cart'));
const DetailView = lazy(() => import('./Components/ItemDetails/DetailView'));
const SearchResultsPage = lazy(() => import('./Components/SearchResults/SearchResultsPage'));
const NotFound = lazy(() => import('./Components/NotFound'));

function App() {
  return (
    <TemplateProvider>
      <Provider store={store}>
        <ContextProvider>
          <BrowserRouter>
            <Header />
            <Box style={{ marginTop: 54 }}>
              <Suspense fallback={<Typography>Loading...</Typography>}>
                <Switch>
                  <Route exact path="/" component={Home} />
                  <Route path="/cart" component={Cart} />
                  <Route path="/product/:id" component={DetailView} />
                  <Route path="/search" component={SearchResultsPage} />
                  <Route component={NotFound} />  {/* Catch-all for 404 */}
                </Switch>
              </Suspense>
            </Box>
          </BrowserRouter>
        </ContextProvider>
      </Provider>
    </TemplateProvider>
  );
}

export default App;
</file>

<file path="client/src/index.css">
body {
  margin: 0;
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',
    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',
    sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

code {
  font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',
    monospace;
}
</file>

<file path="client/src/index.js">
import React from 'react';
import ReactDOM from 'react-dom';
import './index.css';
import App from './App';
import { Provider } from 'react-redux';
import store from './redux/store';

ReactDOM.render(
  <Provider store={store} >
    <React.StrictMode>
      <App />
    </React.StrictMode>
  </Provider>,
  document.getElementById('root')
);
</file>

<file path="client/.gitignore">
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.js

# testing
/coverage

# production
/build

# misc
.DS_Store
.env.local
.env.development.local
.env.test.local
.env.production.local

npm-debug.log*
yarn-debug.log*
yarn-error.log*
</file>

<file path="client/package.json">
{
  "name": "client",
  "version": "0.1.0",
  "private": true,
  "dependencies": {
    "@google-pay/button-react": "^2.3.0",
    "@material-ui/core": "^4.11.4",
    "@material-ui/icons": "^4.11.2",
    "@testing-library/jest-dom": "^5.12.0",
    "@testing-library/react": "^11.2.6",
    "@testing-library/user-event": "^12.8.3",
    "axios": "^0.21.4",
    "clsx": "^1.1.1",
    "dompurify": "^3.2.6",
    "react": "^17.0.2",
    "react-countdown": "^2.3.2",
    "react-dom": "^17.0.2",
    "react-material-ui-carousel": "^2.2.6",
    "react-multi-carousel": "^2.6.2",
    "react-redux": "^7.2.4",
    "react-router-dom": "^5.2.0",
    "react-scripts": "4.0.3",
    "redux": "^4.1.0",
    "redux-devtools-extension": "^2.13.9",
    "redux-thunk": "^2.3.0",
    "web-vitals": "^1.1.2"
  },
  "scripts": {
    "start": "NODE_OPTIONS=--openssl-legacy-provider react-scripts start",
    "build": "NODE_OPTIONS=--openssl-legacy-provider react-scripts build",
    "test": "react-scripts test",
    "eject": "react-scripts eject",
    "analyze": "npm run build -- --stats"
  },
  "eslintConfig": {
    "extends": [
      "react-app",
      "react-app/jest"
    ]
  },
  "browserslist": {
    "production": [
      ">0.2%",
      "not dead",
      "not op_mini all"
    ],
    "development": [
      "last 1 chrome version",
      "last 1 firefox version",
      "last 1 safari version"
    ]
  }
}
</file>

<file path="server/constants/product.js">
export const products = [
    { 
        id: 'product1',
        url: 'https://rukminim1.flixcart.com/image/150/150/kapoo7k0/electric-kettle/p/6/s/pigeon-favourite-original-imafs7xhj5uwgrh4.jpeg?q=70', 
        detailUrl: 'https://rukminim1.flixcart.com/image/416/416/kapoo7k0/electric-kettle/p/6/s/pigeon-favourite-original-imafs7xhj5uwgrh4.jpeg?q=70',
        title: {
            shortTitle: 'Home & Kitchen',
            longTitle: 'Pigeon FAVOURITE Electric Kettle  (1.5 L, Silver, Black)'
        }, 
        price: {
            mrp: 1195,
            cost: 625,
            discount: '47%'
        },
        quantity: 1,
        description: 'This electric kettle from Pigeon will soon become a travelers best friend, a hostelite saviour and an answer to all the midnight cravings. With this handy appliance, you can boil water and use it to make instant noodles, packet soup, coffee and green tea.',
        discount: 'Extra 10% Off', 
        tagline: 'Deal of the day' 
    },
    { 
        id: 'product2',
        url: 'https://rukminim1.flixcart.com/image/416/416/kl6wx3k0/sandwich-maker/8/r/d/sandwich-01-flipkart-smartbuy-original-imagydds4zthxt8z.jpeg?q=70', 
        detailUrl: 'https://rukminim1.flixcart.com/image/416/416/kl6wx3k0/sandwich-maker/8/r/d/sandwich-01-flipkart-smartbuy-original-imagydds4zthxt8z.jpeg?q=70',
        title: {
            shortTitle: 'Sandwich Makers',
            longTitle: 'Flipkart SmartBuy Sandwich 01 Grill  (Black)'
        },
        price: {
            mrp: 1499,
            cost: 899,
            discount: '40%'
        },
        quantity: 1,
        description: 'This non-stick sandwich toaster .easy to use and very handy. Directly hold over flame to make tasty toasts and toasted sandwiches. Specially designed by keeping your needs in mind, the sandwich maker makes whatever youre doing simpler, smarter and better',
        discount: 'From 99+5% Off', 
        tagline: 'Pestige, Nova & more' 
    },
    { 
        id: 'product3',
        url: 'https://rukminim1.flixcart.com/image/150/150/kohigsw0/resistance-tube/c/s/e/new-adjustable-single-resistance-tube-multicolor-na-ajro-deal-original-imag2xg88mhmwxz5.jpeg?q=70', 
        detailUrl: 'https://rukminim1.flixcart.com/image/416/416/kohigsw0/resistance-tube/c/s/e/new-adjustable-single-resistance-tube-multicolor-na-ajro-deal-original-imag2xg88mhmwxz5.jpeg?q=70', 
        title: {
            shortTitle: 'Fitness Gear',
            longTitle: 'AJRO DEAL New Adjustable Single Resistance Tube (Multicolor) Resistance Tube  (Multicolor)'
        }, 
        price: {
            mrp: 499,
            cost: 166,
            discount: '66%'
        },
        quantity: 1,
        description: 'This unique product can tone your back muscles, reduce belly fat, improve blood circulation and also improves your body posture. It increases the stamina, energy and vitality of the body. The elastic resistance of the rubber training rope can be used to train and exercise in whichever way you want, according to your physical needs.',
        discount: 'Upto 70% Off', 
        tagline: 'Deal of the Day' 
    },
    { 
        id: 'product4',
        url: 'https://rukminim1.flixcart.com/image/300/300/kll7bm80/smartwatch/c/1/n/43-mo-sw-sense-500-android-ios-molife-original-imagyzyycnpujyjh.jpeg?q=70', 
        detailUrl: 'https://rukminim1.flixcart.com/image/416/416/kll7bm80/smartwatch/c/1/n/43-mo-sw-sense-500-android-ios-molife-original-imagyzyycnpujyjh.jpeg?q=70',
        title: {
            shortTitle: 'Smart Watches',
            longTitle: 'Molife Sense 500 Smartwatch  (Black Strap, Freesize)',
        }, 
        price: {
            mrp: 6999,
            cost: 4049,
            discount: '42%'
        },
        quantity: 1,
        description: 'The Molife Sense 500, a brilliant smartwatch with a beautiful large display. Say hello to the infinity 1.7-inch display with 2.5D curved edges. Thanks to seamless Bluetooth 5.0 connectivity, you wont have to keep waiting. Bring a change to your outfit every day with changeable straps. A splash of color every day keeps the boredom away.',
        discount: 'Grab Now', 
        tagline: 'Best Seller' 
    },
    { 
        id: 'product5',
        url: 'https://rukminim1.flixcart.com/image/416/416/k3uhhu80/hair-dryer/n/m/t/nova-2800-w-professional-nhp-8220-original-imafmvwfhmzsxdrw.jpeg?q=70',
        detailUrl: 'https://rukminim1.flixcart.com/image/416/416/k3uhhu80/hair-dryer/n/m/t/nova-2800-w-professional-nhp-8220-original-imafmvwfhmzsxdrw.jpeg?q=70', 
        title: {
            shortTitle: 'Trimmers, Dryers & more',
            longTitle: 'Nova Professional NHP 8220 Hair Dryer  (1800 W, Multicolor)'
        }, 
        price: {
            mrp: 1899,
            cost: 1124,
            discount: '40%'
        },
        quantity: 1,
        description: '',
        discount: 'From ₹499', 
        tagline: 'Kubra, Nova & more' 
    },
    { 
        id: 'product6',
        url: 'https://rukminim1.flixcart.com/image/150/150/kk01pjk0/fan/d/d/l/tiktik-quiet-portable-table-fan-zigma-original-imafzg7ftzuckpad.jpeg?q=70',
        detailUrl: 'https://rukminim1.flixcart.com/image/416/416/kk01pjk0/fan/d/d/l/tiktik-quiet-portable-table-fan-zigma-original-imafzg7ftzuckpad.jpeg?q=70', 
        title: {
            shortTitle: 'Table Fans',
            longTitle: 'Portable 300 mm Ultra High Speed 3 Blade Table Fan  (Black, Pack of 1)'
        }, 
        price: {
            mrp: 2250,
            cost: 1199,
            discount: '46%'
        },
        quantity: 1,
        description: 'Table Fan. Perfect size fan for use on a table, desk or in an RV. Whisper quiet, powerful airflow and reliable operation in a compact 6" size. Two adjustable speeds to customize airflow: high or low settings. Tough break-resistant ABS plastic blades. ',
        discount: 'Minimum 40% Off', 
        tagline: 'Top Selling' 
    },
    { 
        id: 'product7',
        url: 'https://rukminim1.flixcart.com/image/150/150/kcgk1ow0/headphone/n/u/a/235v2-fast-charging-boat-original-imaftk6us4af7bca.jpeg?q=70',
        detailUrl: 'https://rukminim1.flixcart.com/image/416/416/kcgk1ow0/headphone/n/u/a/235v2-fast-charging-boat-original-imaftk6us4af7bca.jpeg?q=70', 
        title: {
            shortTitle: 'Headphones',
            longTitle: 'boAt Rockerz 235v2 with ASAP charging Version 5.0 Bluetooth Headset '
        }, 
        price: {
            mrp: 2990,
            cost: 1199,
            discount: '59%'
        },
        quantity: 1,
        description: 'Let music brighten up your mood anytime, anywhere with the boAt 235v2 Fast Charging Bluetooth Headset. This Bluetooth headset features a Call Vibration Alert, a Fast Charging Technology, and Easy Access Controls to listen to and manage your favorite music with ease.',
        discount: 'Minimum 50% Off', 
        tagline: 'Grab Now!' 
    }
];
</file>

<file path="server/controller/cart-controller.js">
import Cart from '../model/cartSchema.js';


export const addItemInCart = (request, response) => {
    return response.json("Hello");
}
</file>

<file path="server/controller/categoryController.js">
import Product from '../model/productSchema.js';

// Get all unique categories
export const getCategories = async (req, res) => {
  const categories = await Product.distinct('category');
  res.json(categories);
};

// Get all unique subcategories for a category
export const getSubcategories = async (req, res) => {
  const subcategories = await Product.distinct('subcategory', { category: req.params.category });
  res.json(subcategories);
};

// Recommend top N products from a category/subcategory (could sort by rating/popularity)
export const getCategoryRecommendations = async (req, res) => {
  const { category } = req.params;
  const products = await Product.find({ category }).sort({ product_rating: -1 }).limit(8);
  res.json(products);
};
</file>

<file path="server/controller/payment-controller.js">
import Order from "../model/orderSchema.js";
import Razorpay from "razorpay";
import { updateRecentPurchases } from '../utils/userHistory.js';


export const createOrder = (request, response) => {
  try {
    const instance = (instance = new Razorpay({
      key_id: process.env.RAZORPAY_KEY_ID,
      key_secret: process.env.RAZORPAY_KEY_SECRET,
    }));
   console.log(request.body);
    const options = {
      amount: request.body.price,
      currency: "INR",
    };
    const order = instance.create(options);
    if (!order) response.send("Some error occured");
    response.send(order);
  } catch (error) {
    response.send(error);
  }
};

export const payOrder = async (request, response) => {
  // console.log("triiggerd payOder");
  // console.log(request.body);
  try {
    const { amount, razorpayPaymentId, razorpayOrderId, razorpaySignature } =
      request.body;
    const newOrder = Order.create({
      isPaid: true,
      amount: amount,
      razorpay: {
        order_id: razorpayOrderId,
        payment_id: razorpayPaymentId,
        signature: razorpaySignature,
      },
    });
    await response.send({msg:"payment was successfull"});
  } catch (error) {
    response.send(error);
  }
};

export const paymentResponse= async(request,response)=>{
 const orders=await Order.find();
 console.log(orders);
 response.send(orders);
}
</file>

<file path="server/controller/product-controller.js">
import Product from '../model/productSchema.js';
import { redisClient } from '../database/redis.js';
import mongoose from 'mongoose';

const CACHE_EXPIRATION_SECONDS = 3600;

export const getProducts = async (request, response) => {
  try {
    const { page = 1, limit = 20 } = request.query;  // Add pagination params
    const skip = (page - 1) * limit;

    const cachedProducts = await redisClient.get(`products:page:${page}`);
    if (cachedProducts) {
      return response.json(JSON.parse(cachedProducts));
    }

    const products = await Product.find({}).skip(skip).limit(parseInt(limit));  // Paginate
    await redisClient.setEx(`products:page:${page}`, 3600, JSON.stringify(products));  // Cache per page
    response.json(products);
  } catch (error) {
    response.status(500).json({ message: error.message });
  }
};

// Similarly for getProductById:
export const getProductById = async (request, response) => {
  try {
    const productId = request.params.id;
    const cachedProduct = await redisClient.get(`product:${productId}`);
    if (cachedProduct) {
      return response.json(JSON.parse(cachedProduct));
    }

    let product = await Product.findById(productId) || await Product.findOne({ pid: productId });
    if (!product) return response.status(404).json({ message: 'Product not found' });

    await redisClient.setEx(`product:${productId}`, 3600, JSON.stringify(product));  // Cache
    response.json(product);
  } catch (error) {
    response.status(500).json({ message: error.message });
  }
};
</file>

<file path="server/controller/search-controller.js">
import Product from '../model/productSchema.js';
import Category from '../model/categorySchema.js';
import { esClient } from '../index.js';
import { updateUserProfile, getUserProfile, redisClient } from '../database/redis.js';


const indexName = 'products';


// UPDATED: Enhanced regex escape to handle trailing/invalid backslashes (double-escape '\')
function escapeRegex(text) {
    return text.replace(/[-[\]{}()*+?.,\\^$|#\s]/g, '\\$&').replace(/\\/g, '\\\\');
}


// --- Personalized Search Controller: Returns ranked products + category suggestions ---
export const personalizedSearch = async (req, res) => {
    const { q: searchQuery, userId } = req.query;
    if (!searchQuery) {
        return res.status(400).send('Query "q" is required.');
    }


    // UserId is optional; if missing, proceed without personalization
    let boostProducts = [];
    try {
        if (userId) {
            const profile = await getUserProfile(userId);
            boostProducts = profile?.clicked_products || [];
        }
    } catch (redisError) {
        console.error('Redis error in personalizedSearch:', redisError);
        // Continue without boosting
    }


    try {
        let productResults = [];
        let categorySuggestions = [];


        // --- Product Search: Elasticsearch, Fallback to Mongo ---
        try {
            // ES - match on product name + category, allow typos, with boosting and highlighting
            const { hits } = await esClient.search({
                index: indexName,
                query: {
                    bool: {  // Use bool for boosting
                        should: [
                            {
                                multi_match: {
                                    query: searchQuery,
                                    fields: ['name^2', 'name._2gram', 'name._3gram', 'category'],
                                    fuzziness: 'AUTO',
                                    type: 'best_fields'
                                }
                            },
                            {
                                terms: { _id: boostProducts } // Boost user's clicked products
                            }
                        ]
                    }
                },
                highlight: {
                    fields: {
                        name: { pre_tags: ['<strong>'], post_tags: ['</strong>'] },
                        category: { pre_tags: ['<strong>'], post_tags: ['</strong>'] }
                    }
                },
                sort: [{ rating: { order: 'desc' } }, '_score'], // Sort by rating + relevance
                size: 20
            });
            productResults = hits.hits.map(hit => ({
                id: hit._id,
                title: {
                    longTitle: hit.highlight?.name?.[0] || hit._source.name, // Highlighted
                    shortTitle: hit.highlight?.category?.[0] || hit._source.category
                },
                score: hit._score,
                rating: hit._source.rating,
                type: 'product'
            }));
        } catch (esError) {
            console.error('ES error in personalizedSearch:', esError);
            // Mongo Fallback (case-insensitive substring, with basic boosting)
            try {
                const escapedQuery = escapeRegex(searchQuery);
                let products = await Product.find({
                    $or: [
                        { 'title.longTitle': { $regex: escapedQuery, $options: 'i' } },
                        { 'title.shortTitle': { $regex: escapedQuery, $options: 'i' } },
                        { description: { $regex: escapedQuery, $options: 'i' } }
                    ]
                }).sort({ rating: -1 }).limit(20); // Sort by rating descending


                // Basic boosting: Move clicked products to top
                products = products.sort((a, b) => 
                    (boostProducts.includes(b._id.toString()) ? 1 : 0) - (boostProducts.includes(a._id.toString()) ? 1 : 0)
                );


                // Pseudo-highlighting: Wrap matched terms
                productResults = products.map(product => {
                    const longTitle = product.title.longTitle.replace(
                        new RegExp(escapedQuery, 'gi'), 
                        match => `<strong>${match}</strong>`
                    );
                    const shortTitle = product.title.shortTitle.replace(
                        new RegExp(escapedQuery, 'gi'), 
                        match => `<strong>${match}</strong>`
                    );
                    return {
                        id: product._id.toString(),
                        title: { longTitle, shortTitle },
                        rating: product.rating,
                        type: 'product'
                    };
                });
            } catch (mongoError) {
                console.error('Mongo fallback error in personalizedSearch:', mongoError);
                productResults = []; // Graceful fallback: empty results
            }
        }


        // --- Category/Subcategory Suggestions (de-duped, both fields) ---
        try {
            const escapedQuery = escapeRegex(searchQuery);
            const catMatches = await Category.find({
                $or: [
                    { category: { $regex: escapedQuery, $options: 'i' } },
                    { subcategory: { $regex: escapedQuery, $options: 'i' } }
                ]
            }).limit(10);
            const catSet = new Set();
            catMatches.forEach(c => {
                if (c.category && c.category.toLowerCase().includes(searchQuery.toLowerCase()))
                    catSet.add(JSON.stringify({ type: 'category', name: c.category }));
                if (c.subcategory && c.subcategory.toLowerCase().includes(searchQuery.toLowerCase()))
                    catSet.add(JSON.stringify({ type: 'subcategory', name: c.subcategory }));
            });
            let categories = Array.from(catSet).map(s => JSON.parse(s));


            // Sort by exact match and limit to top 5 for full search
            categories = categories.sort((a, b) => {
                const aMatch = a.name.toLowerCase() === searchQuery.toLowerCase() ? 1 : 0;
                const bMatch = b.name.toLowerCase() === searchQuery.toLowerCase() ? 1 : 0;
                return bMatch - aMatch;
            }).slice(0, 5);


            categorySuggestions = categories;
        } catch (mongoError) {
            console.error('Mongo category error in personalizedSearch:', mongoError);
            categorySuggestions = []; // Graceful fallback
        }


        // --- Compose: category suggestions on top, then product results ---
        const combinedResults = [...categorySuggestions, ...productResults].slice(0, 20);
        res.json(combinedResults);
    } catch (error) {
        console.error('Search controller error:', error);
        res.status(500).json({ error: 'Something went wrong during search.' });
    }
};


// --- Click Tracking for personalization ---
export const trackClick = async (req, res) => {
    const { userId, productId, category } = req.body;
    if (!userId) {
        return res.status(400).json({ message: 'userId is required' });
    }


    try {
        // Existing: Update clicked products if productId provided
        if (productId) {
            await updateUserProfile(userId, productId);


            // NEW: Track categories from the clicked product (with safe fetch)
            let product;
            try {
                // Skip findById if productId looks like a PID (not 24 hex chars) to avoid CastError
                if (/^[0-9a-fA-F]{24}$/.test(productId)) {
                    product = await Product.findById(productId);
                }
                // Fallback to pid or id fields (your CSV-based identifiers)
                if (!product) {
                    product = await Product.findOne({
                        $or: [{ pid: productId }, { id: productId }]
                    });
                }
                if (!product) {
                    console.warn(`Product not found for ID/PID: ${productId} - Skipping category tracking`);
                }
            } catch (fetchError) {
                // Log but don't crash - continue without category tracking
                console.error(`Error fetching product ${productId}:`, fetchError.message);
            }


            if (product && (product.category || product.subcategory)) {
                const categories = [product.category, product.subcategory].filter(Boolean); // Get unique category/subcategory
                const profile = await getUserProfile(userId); // Reuse existing profile fetch
                profile.clicked_categories = profile.clicked_categories || [];
                
                // Add new categories to the front (for recency), remove duplicates, limit to 10
                categories.forEach(cat => {
                    profile.clicked_categories = profile.clicked_categories.filter(c => c !== cat);
                    profile.clicked_categories.unshift(cat);
                });
                profile.clicked_categories = profile.clicked_categories.slice(0, 10); // Limit history


                // NEW: Ensure client is connected before set
                if (!redisClient.isOpen) await redisClient.connect();
                await redisClient.set(`user:${userId}`, JSON.stringify(profile)); // Update Redis
                console.log(`User ${userId} clicked categories updated: ${categories}`);
            }
        }


        // NEW: Handle direct category/subcategory clicks (if category provided)
        if (category) {
            const profile = await getUserProfile(userId);
            profile.clicked_categories = profile.clicked_categories || [];
            
            // Add new category to the front (for recency), remove duplicates, limit to 10
            profile.clicked_categories = profile.clicked_categories.filter(c => c !== category);
            profile.clicked_categories.unshift(category);
            profile.clicked_categories = profile.clicked_categories.slice(0, 10); // Limit history


            // Ensure client is connected before set
            if (!redisClient.isOpen) await redisClient.connect();
            await redisClient.set(`user:${userId}`, JSON.stringify(profile)); // Update Redis
            console.log(`User ${userId} clicked category updated: ${category}`);
        }


        return res.status(200).json({ message: 'Click tracked successfully' });
    } catch (error) {
        console.error('trackClick error:', error);
        return res.status(500).json({ message: 'Failed to track click' });
    }
};


// --- Autosuggest for search bar: concise categories + product titles ---
export const autosuggest = async (req, res) => {
    const { q } = req.query;
    if (!q || !q.trim()) return res.json([]);
    const query = q.trim().toLowerCase();


    // UserId is optional
    let boostProducts = [];
    let boostCategories = []; // NEW: For category boosting
    try {
        const userId = req.query.userId;
        if (userId) {
            const profile = await getUserProfile(userId);
            boostProducts = profile?.clicked_products || [];
            boostCategories = profile?.clicked_categories || []; // Fetch clicked categories
        }
    } catch (redisError) {
        console.error('Redis error in autosuggest:', redisError);
        // Continue without boosting
    }


    try {
        const escapedQuery = escapeRegex(query);


        // Elasticsearch: for product name and category, with boosting, highlighting, and sorting by rating
        const { hits } = await esClient.search({
            index: indexName,
            query: {
                bool: {  // Use bool query for boosting
                    should: [
                        {
                            multi_match: {
                                query,
                                fields: ['name^2', 'category'],
                                fuzziness: 'AUTO',
                                type: 'best_fields'
                            }
                        },
                        {
                            terms: { _id: boostProducts } // Boost user's clicked products
                        }
                    ]
                }
            },
            highlight: {
                fields: {
                    name: { pre_tags: ['<strong>'], post_tags: ['</strong>'] },
                    category: { pre_tags: ['<strong>'], post_tags: ['</strong>'] }
                }
            },
            sort: [{ rating: { order: 'desc' } }, '_score'], // Combine rating with relevance score
            size: 8
        });


        let productSuggestions = hits.hits.map(hit => {
            const nameLower = (hit._source.name || '').toLowerCase();
            const categoryLower = (hit._source.category || '').toLowerCase();
            let score = 0;
            
            // Personalized boost (only for products)
            if (boostProducts.includes(hit._id)) score += 1000;
            
            // Exact match
            if (nameLower === query) score += 900;
            else if (nameLower.startsWith(query)) score += 500;
            else if (nameLower.includes(query)) score += 100;
            
            // Additional for category
            if (categoryLower.startsWith(query)) score += 200;
            else if (categoryLower.includes(query)) score += 50;
            
            return {
                type: 'product',
                id: hit._id,
                title: {
                    longTitle: hit.highlight?.name?.[0] || hit._source.name, // Use highlighted if available
                    shortTitle: hit.highlight?.category?.[0] || hit._source.category
                },
                rating: hit._source.rating, // Include rating for debugging if needed
                score
            };
        });


        // Sort products by score descending
        productSuggestions.sort((a, b) => b.score - a.score);


        // Category/Subcategory suggestions - REMOVED LIMIT to get ALL matches, then sort/boost
        try {
            const catMatches = await Category.find({
                $or: [
                    { category: { $regex: escapedQuery, $options: 'i' } },
                    { subcategory: { $regex: escapedQuery, $options: 'i' } }
                ]
            }); // No limit here - fetch all potential matches


            const cats = [];
            catMatches.forEach(c => {
                if (c.category && c.category.toLowerCase().includes(query))
                    cats.push({ type: 'category', name: c.category });
                if (c.subcategory && c.subcategory.toLowerCase().includes(query))
                    cats.push({ type: 'subcategory', name: c.subcategory });
            });


            // UPDATED: Apply scoring for categories
            let scoredCats = cats.map(cat => {
                const nameLower = cat.name.toLowerCase();
                let score = 0;
                
                // Personalized boost
                if (boostCategories.includes(cat.name)) score += 1000;
                
                // Exact match
                if (nameLower === query) score += 900;
                
                // Prefix boost
                if (nameLower.startsWith(query)) score += 500;
                
                // Substring match but not prefix
                else if (nameLower.includes(query)) score += 100;
                
                return { ...cat, score };
            });


            // Sort by score descending
            scoredCats.sort((a, b) => b.score - a.score);


            const categories = Array.from(new Set(scoredCats.map(x => JSON.stringify({ type: x.type, name: x.name })))).map(x => JSON.parse(x)).slice(0, 3); // Limit to top 3 AFTER sorting


            // Combine, keeping categories above products, max 8 total
            const finalSuggestions = [...categories, ...productSuggestions.slice(0, 5)].slice(0, 8);
            return res.json(finalSuggestions);
        } catch (mongoError) {
            console.error('Mongo category error in autosuggest:', mongoError);
            return res.json([]); // Graceful fallback
        }
    } catch (err) {
        console.error('ES error in autosuggest:', err);
        // MongoDB fallback: similar logic, sorted by rating descending
        try {
            const escapedQuery = escapeRegex(query);
            let products = await Product.find({
                $or: [
                    { 'title.longTitle': { $regex: escapedQuery, $options: 'i' } },
                    { 'title.shortTitle': { $regex: escapedQuery, $options: 'i' } }
                ]
            }).sort({ rating: -1 }) // Sort by rating descending
              .limit(5); // Limit to top 5 highest-rated


            // Basic boosting: Move clicked products to top
            products = products.sort((a, b) => 
                (boostProducts.includes(b._id.toString()) ? 1 : 0) - (boostProducts.includes(a._id.toString()) ? 1 : 0)
            );


            // Pseudo-highlighting: Wrap matched terms
            let productSuggestions = products.map(p => {
                const longTitleLower = p.title.longTitle.toLowerCase();
                const shortTitleLower = p.title.shortTitle.toLowerCase();
                let score = 0;
                
                // Personalized boost
                if (boostProducts.includes(p._id.toString())) score += 1000;
                
                // Exact match on longTitle
                if (longTitleLower === query) score += 900;
                else if (longTitleLower.startsWith(query)) score += 500;
                else if (longTitleLower.includes(query)) score += 100;
                
                // Additional for shortTitle
                if (shortTitleLower.startsWith(query)) score += 200;
                else if (shortTitleLower.includes(query)) score += 50;
                
                const longTitle = p.title.longTitle.replace(
                    new RegExp(escapedQuery, 'gi'), 
                    match => `<strong>${match}</strong>`
                );
                const shortTitle = p.title.shortTitle.replace(
                    new RegExp(escapedQuery, 'gi'), 
                    match => `<strong>${match}</strong>`
                );
                return {
                    type: 'product',
                    id: p._id.toString(),
                    title: { longTitle, shortTitle },
                    rating: p.rating, // Include rating for debugging if needed
                    score
                };
            });


            // Sort products by score descending
            productSuggestions.sort((a, b) => b.score - a.score);


            const catMatches = await Category.find({
                $or: [
                    { category: { $regex: escapedQuery, $options: 'i' } },
                    { subcategory: { $regex: escapedQuery, $options: 'i' } }
                ]
            }); // No limit
            const cats = [];
            catMatches.forEach(c => {
                if (c.category && c.category.toLowerCase().includes(query))
                    cats.push({ type: 'category', name: c.category });
                if (c.subcategory && c.subcategory.toLowerCase().includes(query))
                    cats.push({ type: 'subcategory', name: c.subcategory });
            });


            // Apply scoring for categories
            let scoredCats = cats.map(cat => {
                const nameLower = cat.name.toLowerCase();
                let score = 0;
                
                // Personalized boost
                if (boostCategories.includes(cat.name)) score += 1000;
                
                // Exact match
                if (nameLower === query) score += 900;
                
                // Prefix boost
                if (nameLower.startsWith(query)) score += 500;
                
                // Substring match but not prefix
                else if (nameLower.includes(query)) score += 100;
                
                return { ...cat, score };
            });


            // Sort by score descending
            scoredCats.sort((a, b) => b.score - a.score);


            const categories = Array.from(new Set(scoredCats.map(x => JSON.stringify({ type: x.type, name: x.name })))).map(x => JSON.parse(x)).slice(0, 3); // Limit to top 3 AFTER sorting


            const final = [...categories, ...productSuggestions].slice(0, 8);
            return res.json(final);
        } catch (mongoError) {
            console.error('Mongo fallback error in autosuggest:', mongoError);
            return res.json([]); // Graceful fallback
        }
    }
};
</file>

<file path="server/controller/user-controller.js">
import bcrypt from 'bcrypt';
import User from '../model/userSchema.js';
import jwt from 'jsonwebtoken';

export const userSignUp = async (req, res) => {
    try {
        const { firstname, lastname, username, email, password, phone } = req.body;
        
        // Check if user already exists
        const existingUser = await User.findOne({ 
            $or: [{ username }, { email }] 
        });
        
        if (existingUser) {
            return res.status(409).json({ message: 'User already exists' });
        }

        // Hash the password
        const hashedPassword = await bcrypt.hash(password, 10);
        
        const newUser = new User({
            firstname,
            lastname,
            username,
            email,
            phone,
            password: hashedPassword
        });

        await newUser.save();

        // Generate JWT token
        const token = jwt.sign(
            { userId: newUser._id, username: newUser.username },
            process.env.JWT_SECRET || 'fallback_secret',
            { expiresIn: '7d' }
        );

        res.status(200).json({ 
            message: `${newUser.firstname} has been successfully registered`,
            token,
            user: {
                id: newUser._id,
                firstname: newUser.firstname,
                lastname: newUser.lastname,
                username: newUser.username,
                email: newUser.email
            }
        });
    } catch (error) {
        console.error('Signup error:', error);
        res.status(500).json({ message: error.message });
    }
};

export const userLogIn = async (req, res) => {
    try {
        // Frontend sends 'email' field, not 'emailOrUsername'
        const { email, password } = req.body;
        
        // Find user by email or username
        const user = await User.findOne({
            $or: [{ email }, { username: email }]
        });

        if (!user) {
            return res.status(401).json({ message: 'User not found' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(401).json({ message: 'Incorrect password' });
        }

        const token = jwt.sign(
            { userId: user._id, username: user.username },
            process.env.JWT_SECRET || 'fallback_secret',
            { expiresIn: '7d' }
        );

        res.json({
            token,
            user: {
                id: user._id,
                firstname: user.firstname,
                lastname: user.lastname,
                username: user.username,
                email: user.email
            }
        });
    } catch (err) {
        console.error('Login error:', err);
        res.status(500).json({ message: 'Error: ' + err.message });
    }
};
</file>

<file path="server/database/db.js">
import mongoose from 'mongoose';
import dotenv from 'dotenv';

// This ensures your .env file is read
dotenv.config();

const Connection = async () => {
    const password = process.env.DB_PASSWORD;
    // This is the correct connection string you got from the Atlas website
    const URL = `mongodb+srv://yashanand37:${password}@cluster0.mwn1mjt.mongodb.net/flipkart?retryWrites=true&w=majority&appName=Cluster0`;

    try {
        // Connect without the old, unnecessary options
        await mongoose.connect(URL);
        
        console.log('Database Connected Successfully');
    } catch(error) {
        console.log('Error: ', error.message);
    }
};

export default Connection;
</file>

<file path="server/database/redis.js">
import { createClient } from 'redis';

export const redisClient = createClient();
redisClient.on('error', (err) => console.log('Redis Client Error', err));
await redisClient.connect();
console.log('Connected to Redis.');

export async function getUserProfile(userId) {
    try {
        const profileJSON = await redisClient.get(`user:${userId}`);
        return profileJSON ? JSON.parse(profileJSON) : { clicked_products: [] };
    } catch (err) {
        return null;
    }
}

export async function updateUserProfile(userId, productId) {
    try {
        const profile = await getUserProfile(userId);
        if (profile && !profile.clicked_products.includes(productId)) {
            profile.clicked_products.push(productId);
            await redisClient.set(`user:${userId}`, JSON.stringify(profile));
            console.log(`User ${userId} profile updated with product ${productId}`);
        }
    } catch (err) {
        console.error('Error updating user profile:', err);
    }
}
</file>

<file path="server/middleware/auth.js">
import jwt from 'jsonwebtoken';

export const auth = (req, res, next) => {
  const token = req.headers['authorization'];
  if (!token) return res.status(401).json({ message: 'No token provided' });
  try {
    const decoded = jwt.verify(token.replace('Bearer ', ''), process.env.JWT_SECRET || 'yourSecret');
    req.user = decoded;
    next();
  } catch (err) {
    res.status(401).json({ message: 'Invalid token' });
  }
};
</file>

<file path="server/model/cartSchema.js">
import mongoose from 'mongoose';

const cartSchema = new mongoose.Schema({
    user: {
        username: String,
        // ref: 'user',
        // required: true 
    },
    cartItems: [
        {
            product: {
                id: String,
                // required: true,
                // ref: 'Product'
            },
            quantity: {
                type: Number,
                default: 1
            },
            price: {
                price: Number,
                // required: true
            }
        }
    ]
});

let Cart = mongoose.model('Cart', cartSchema);

export default Cart;
</file>

<file path="server/model/categorySchema.js">
import mongoose from 'mongoose';

const categorySchema = new mongoose.Schema({
  category: { type: String, trim: true },
  subcategory: { type: String, trim: true }
});

export default mongoose.model('Category', categorySchema);
</file>

<file path="server/model/orderSchema.js">
import mongoose from "mongoose"

export const OrderSchema=mongoose.Schema({

    isPaid:Boolean,
    amount:Number,
    razorpay:{
        order_id:String,
        payment_id:String,
        signature:String,
    },

})

const order=mongoose.model("order",OrderSchema);

export default order;
</file>

<file path="server/model/productSchema.js">
import mongoose from 'mongoose';

const productSchema = new mongoose.Schema({
    id: String,
    pid: String,
    url: String,
    detailUrl: String,
    title: Object,
    price: Object,
    quantity: Number,
    description: String,
    discount: String,
    tagline: String,
    brand: String,          // For brand filtering
    category: String,       // For category filtering
    subcategory: String,
    rating: Number,         // For rating filtering
    specifications: String,
    product_category_tree: String, // You can keep this if you want hierarchy

});
productSchema.index({ id: 1, pid: 1, category: 1, brand: 1 });
const products = mongoose.model('product', productSchema);

export default products;
</file>

<file path="server/model/userSchema.js">
import mongoose from 'mongoose';

const userSchema = new mongoose.Schema({
    firstname: { type: String, required: true, trim: true, max: 20 },
    lastname: { type: String, required: true, trim: true, max: 20 },
    username: { type: String, required: true, trim: true, unique: true, index: true },
    email: { type: String, required: true, trim: true, unique: true, lowercase: true },
    phone: { type: String, required: true },
    password: { type: String, required: true },
    recentSearches: { type: [String], default: [] },
    recentCart: { type: [Object], default: [] },
    recentPurchases: { type: [Object], default: [] }
}, { timestamps: true });

const User = mongoose.model('User', userSchema);
export default User;
</file>

<file path="server/routes/route.js">
import express from  'express';
import { getProductById, getProducts } from '../controller/product-controller.js';
import { userSignUp, userLogIn } from '../controller/user-controller.js';
import { addItemInCart } from '../controller/cart-controller.js';
import { createOrder } from '../controller/payment-controller.js';
import { payOrder } from '../controller/payment-controller.js';
import { paymentResponse } from '../controller/payment-controller.js';
import { personalizedSearch, trackClick } from '../controller/search-controller.js';
import { getCategories, getSubcategories, getCategoryRecommendations } from '../controller/categoryController.js';
import { autosuggest } from '../controller/search-controller.js';


const router = express.Router();

//login & signup
router.post('/signup', userSignUp);
router.post('/login', userLogIn);

router.get('/products', getProducts);
router.get('/product/:id', getProductById);

router.post('/cart/add', addItemInCart);

router.get('/get-razorpay-key', (req, res) => {
    res.send({ key: process.env.RAZORPAY_KEY_ID });
  });
  router.get('/categories', getCategories);
router.get('/categories/:category/subcategories', getSubcategories);
router.get('/category-recommendations/:category', getCategoryRecommendations);
router.post("/create-order", createOrder);
router.post('/pay-order', payOrder);
router.get('/pay-res', paymentResponse);
router.get('/search', personalizedSearch);
router.post('/click', trackClick);
router.get('/autosuggest', autosuggest);


export default router;
</file>

<file path="server/utils/userHistory.js">
// utils/userHistory.js
import User from '../model/userSchema.js';

// Call this on cart change
export async function updateRecentCart(userId, cartSnapshot) {
  const user = await User.findById(userId);
  user.recentCart.unshift(cartSnapshot);
  user.recentCart = user.recentCart.slice(0, 15);
  await user.save();
}

// Call this on every search
export async function updateRecentSearches(userId, searchQuery) {
  const user = await User.findById(userId);
  // Remove duplicates
  user.recentSearches = user.recentSearches.filter(q => q !== searchQuery);
  user.recentSearches.unshift(searchQuery);
  user.recentSearches = user.recentSearches.slice(0, 15);
  await user.save();
}

// Call this after purchase completed
export async function updateRecentPurchases(userId, productObj) {
  const user = await User.findById(userId);
  user.recentPurchases.unshift(productObj);
  user.recentPurchases = user.recentPurchases.slice(0, 15);
  await user.save();
}
</file>

<file path="server/.gitignore">
/node_modules
.env
</file>

<file path="server/categories_subcategories_list.csv">
category,subcategory
Home Entertainment,Televisions
Home Appliances,Washing Machines
Kitchen Appliances,Air Conditioners
Mobiles & Accessories,Refrigerators
Wearable Smart Devices,Microwave Ovens
Computer Components,Mixer Juicer Grinder
Computers,Oven Toaster Grills
HDD,Chimney
Cameras,Food Processors
Network Components,Fans
Home,Water purifiers
Toy Vehicles,Vacuum Cleaners
Toys and Games,Sewing Machines
Action Toys,Voltage Stabilizers
Indoor Games,Water Geysers
Remote Control Toys,Mobiles
Straws,Smart Bands
Pump,Monitors
Balloons & Decoration,Laptops
Bubble Makers,Tablets
Balloons,External HDD
Accessories,Sports & Action
,DSLR & Mirrorless
Hats,Routers
Party Glow Ornaments,Footwear
School Supplies,Remote Control Toys
Diaper & Potty Training,Toys and Games
Baby Care,Soft Toys
Pregnancy Pillows,Action Figures
Nursing Breast Pad,Dolls & Doll Houses
Nursing & Breast Feeding,Musical Toys
Baby Food,Board Games
Baby Feeding Bottle & Accessories,Puzzles and Cubes
Baby Pain Relief,Remote Control Aeroplane and Helicopters
Body Pain Relief,Antil's Straws
Cotton Buds,YSK Straws
Baby Proofing & Safety,Jeevan jyoti agency Pump
Baby Cleaners & Detergents,Vadhavan Straws
Dolls,Climberty Balloons & Decoration
Dolls Playsets,dynamicglancy Bubble Makers
Doll House Set,PARTY MIDLINKERZ Balloons
School Bags,SOI Balloons
Mini Drones,PARTY BREEZE Balloons
Wrist Watches,Twisty The Boba Station Straws
Casual Shoes,Verilux Straws
Cartoon Characters Soft Toys,Gambit Straws
Sandals,Rusabl Straws
Coin Banks,PROVERVE Sports Accessories
Kids' T-shirts,Fun Affairs Balloons
Kids' Tops,BGT Accessories
Soft Toys,ZeroLuxury Accessories
Travel Pouches,
Luggage Covers,HASTHIP Hats
Outdoor Toys,frilt Balloons & Decoration
Gym Bag,BUC Balloons
Kitchen Set,Samanth Creations Balloons & Decoration
Pillows,ZITRONIX Party Glow Ornaments
Lunch Boxes,Battle Toys
Sunglasses,School Bags
Push Rideons,School Sets
Kids Scooters,"Kitchen, Cookware & Serveware"
Tricycles,Baby Care
Kids' Track Pants,Potty Seats
Kids' Apparel Combos,Baby Wipes
Kids' Shorts,Baby Diapers
Building and Blocks Toys,Baby Bathing Accessories
Baby Laundry Detergents,Areoveda Diaper & Potty Training
Baby Mosquito & Insect Repellant,KESHAVE PHARMA Pregnancy Pillows
Baby Wipes,LuvLap Nursing Breast Pad
Tongue Cleaner,1st Step Nursing Breast Pad
"Baby Bath, Hair & Skin Care Combo",Femzy Nursing Breast Pad
Baby Diapers,Verdure Nursing & Breast Feeding
Baby Proofing,saloni Nursing Breast Pad
Nappy & Bibs Combo,Stakipo Nursing Breast Pad
Breast Nipple Shields,Fruvanta Nursing Breast Pad
Baby Bed Protector,KIYANSH ENTERPRISE Nursing & Breast Feeding
Baby Feeding Utensils & Accessories,Ecommercehub Nursing Breast Pad
Baby Bibs & Hankies,WILD MINT Pregnancy Pillows
Baby Mats,KRISHVIA Nursing Breast Pad
Baby Bath Towel,CIBZ Nursing Breast Pad
Nappy,MYLO Nursing Breast Pad
Baby Strollers & Prams,Msk Fashion Nursing Breast Pad
Men's Footwear,Cherilo Nursing Breast Pad
Deodorants,Philips Avent Nursing Breast Pad
Beauty and Grooming,Swag Enterprises Nursing Breast Pad
T-shirts,AHC Nursing Breast Pad
Men's Shirts,Baby Cereal
Jeans,Baby Feeding Bottles
Trousers,Baby Feeding Utensils & Accessories
Cargos,Baby Bedding
Track Pants,BabyOrgano Baby Pain Relief
Shorts,ACTIWOW Baby Pain Relief
Three-Fourths,o'mumsie Baby Pain Relief
Clothing and Accessories,Hiran Body Pain Relief
Socks,ACTIWOW Body Pain Relief
Shirt and Trouser Fabrics,Sauran Cotton Buds
Sweaters and Cardigans,AYYIASHI Body Pain Relief
Jackets,Ankerite Body Pain Relief
Sweatshirts,BEUTISKY Baby Pain Relief
Tracksuits,AVENIC Baby Pain Relief
Sherwanis,LoxFlam Body Pain Relief
Kurtas,Twin Swan Body Pain Relief
Ethnic Sets,ASVS Body Pain Relief
Ethnic Pyjamas,Aktivemusli Body Pain Relief
Lungis,I Twin Swan Body Pain Relief
"Kurtas, Ethnic Sets and Bottoms",Unjha Body Pain Relief
Vests,Baby Gear
Pyjamas and Lounge Pants,Baby Proofing
Boxers,Baby Laundry Detergents
Briefs and Trunks,BARBIE Baby Care
Thermals,BARBIE Dolls
Night Suits,BARBIE Dolls Playsets
Raincoats,BARBIE Doll House Set
Watches,BARBIE School Bags
"Bags, Wallets & Belts",Barbie Mini Drones
Jewellery,DISNEY Wrist Watches
Eyewear,DISNEY School Bags
Knee Support,DISNEY Casual Shoes
Men's Vests,DISNEY Cartoon Characters Soft Toys
Men Sandals & Floaters,DISNEY Sandals
Men's Shorts,DISNEY Coin Banks
Medical Supports and Braces,DISNEY Kids' T-shirts
Men Sports Shoes,DISNEY Kids' Tops
Personal Care Appliances,DISNEY Soft Toys
Grooming Kit,Disney Travel Pouches
Men Casual Shoes,DISNEY Luggage Covers
Men Slippers & Flip Flops,DISNEY Outdoor Toys
Men's T-shirts,DISNEY Gym Bag
Men's Track Pants,DISNEY Kitchen Set
Backpacks,DISNEY Pillows
Deodorant Spray,DISNEY Lunch Boxes
Hair Oil,DISNEY Sunglasses
Beard Oil,Miss & Chief Push Rideons
Face Wash,Miss & Chief Kids Scooters
Bath Combos and Kit,DISNEY BY MISS & CHIEF Kids' T-shirts
Moisturizer,Justice League By Miss & Chief Kids' T-shirts
Body Wash,Miss & Chief Tricycles
Eau De Parfum,Justice League By Miss & Chief Kids' Track Pants
Men's Grooming Combo Kit,DISNEY BY MISS & CHIEF Kids' Track Pants
Hair Brush,DISNEY BY MISS & CHIEF Kids' Apparel Combos
Baby Hair Oils,DISNEY BY MISS & CHIEF Kids' Shorts
Face Cream and Gel,LEGO Building and Blocks Toys
Face Pack,LuvLap Baby Laundry Detergents
Talcum Powder,LuvLap Baby Mosquito & Insect Repellant
Skin Care Combo,LuvLap Baby Wipes
Perfume,LuvLap Tongue Cleaner
Bath Brush,"LuvLap Baby Bath, Hair & Skin Care Combo"
Hair Wax,LuvLap Baby Diapers
Loofah,LuvLap Baby Proofing
Deodorant Roll-ons,LuvLap Nappy & Bibs Combo
Scrub,LuvLap Breast Nipple Shields
Shaving Razors,LuvLap Baby Bed Protector
Trimmers,LuvLap Baby Feeding Utensils & Accessories
Hair Styling,LuvLap Baby Bibs & Hankies
"Head, Neck & Shoulder Support",LuvLap Baby Mats
Cricket Balls,LuvLap Baby Bath Towel
Supports,LuvLap Nappy
Women's Sports Shoes,LuvLap Baby Strollers & Prams
Men's Caps,LuvLap Nursing & Breast Feeding
Men's Sweatshirts,Men Casual Shoes
Sports Shoes,Men Sports Shoes
Women's Footwear,Men Sandals & Floaters
Women's Slippers & Flip Flops,Men Slippers & Flip Flops
Pouches and Potlis,Men Formal Shoes
Kids' Trousers,Beauty and Grooming
Duffel Bags,Deodorant Spray
Eau De Toilette,Shaving & Beard Care
Resistance Tubes,Health Care
Women's Casual Shoes,Men's T-shirts
Men's and Women's Socks,Formal Shirts
Dresses,Men's Jeans
Tops,Casual Shirts
Skirts,Men's Trousers
Capris,Men's Cargos
Panties,Men's Track Pants
Innerwear and Swimwear,Men's Shorts
Night Dresses and Nighties,Men's Three-Fourths
Lingerie Sets and Accessories,"Blazers, Waistcoats and Suits"
Swimsuits,Men's and Women's Socks
Camisoles and Slips,Men's Shirt and Trouser Fabrics
Sarees and Saree Essentials,Men's Sweaters
Gowns,Men's Jackets
Clothing Accessories,Men's Sweatshirts
Leggings and Churidars,Men's Tracksuits
Bottomwear,Men's Sherwanis
Footwear,Men's Kurtas
Health & Personal Care Appliances,Men's Ethnic Sets
Hair Care and Accessory,Men's Ethnic Pyjamas
Body & Face Skin Care,Men's Lungis
Coins & Bars,Dhotis
Co-ords,Men's Vests
Women's Kurtas,Men's Pyjamas and Lounge Pants
Handbags & Clutches,Men's Boxers
Wallets & Clutches,Men's Briefs and Trunks
Women's Leggings and Churidars,Men's Thermals
Women's Skirts,Men's Night Suits
Sling Bags,Men and Women Raincoats
Men's Jeans,Wrist Watches
Casual Shirts,GUESS Wrist Watches
Wallets,FOSSIL Wrist Watches
Handbags,Bags & Backpacks
Backpack Handbags,Sunglasses
Clutches & Wallets,Belts
Necklaces,"Bags, Wallets & Belts"
True Wireless,Luggage & Travel
Smart Watches,Artificial Jewellery
Women's Flats,Frames
Women's Ethnic Sets,Risen style Gym Bag
Women's Lehenga Cholis,trendy store Knee Support
Chains,subba store Men's Vests
Women's Sarees,DOCTOR EXTRA SOFT Men Sandals & Floaters
Women's Tops,RISHAB OSWAL Men's Vests
Women's Dresses,EnStore Men's Shorts
Hair Treatment,UNDERLOOP Men's Shorts
Hair Color,trendy store Medical Supports and Braces
Sarees,AAR STORE SALE Men's Vests
Sports,My Walk Men Sports Shoes
Cricket,DOCTOR EXTRA SOFT Men Sports Shoes
Cycling,Smart Watches
Exercise & Fitness,Trimmers
Fitness Accessories,Shavers
Fitness Equipment,Winston Grooming Kit
 Food Products,SKMEI Grooming Kit
Yoga,FINARO Grooming Kit
Food Products,ORTIZA Grooming Kit
Sweets and Mixes,AGARO Grooming Kit
 Beauty and Grooming,Profiline Grooming Kit
Health Care,PHILIPS Grooming Kit
Health Supplements,NOYMI Grooming Kit
Books,BestClipper Grooming Kit
Pens & Stationery,Arrom Grooming Kit
Office Supplies,uniexclusive Grooming Kit
Automotive Accessories,DZX-RE Grooming Kit
Vehicle Stereo and Music System,Groomic Grooming Kit
Vehicle Mobile Accessories,SDGM Grooming Kit
Industrial & Scientific Supplies,Sweetpea Grooming Kit
Packaging & Shipping Products,HTTCC Grooming Kit
Gaming,Daily Needs Shop Grooming Kit
"Kitchen, Cookware & Serveware",Make Ur Wish Grooming Kit
Gas Stove & Accessories,Zeus Volt Grooming Kit
Cookware,HavenFlix Grooming Kit
Tableware & Dinnerware,NIKAI Grooming Kit
Kitchen Storage & Containers,Zeno volt Grooming Kit
Furniture,Painless Grooming Kit
Wardrobes & More,MNS-OS Grooming Kit
TV Units & Cabinets,Mumuxu Grooming Kit
Sofa Beds & More,SIMBS Grooming Kit
Tables,ADIDAS Men Sports Shoes
Bean Bags,ADIDAS Men Casual Shoes
Bed Linen & Blankets,ADIDAS Men Slippers & Flip Flops
Curtains & Accessories,ADIDAS Men's T-shirts
Home Furnishing,ADIDAS Men's Track Pants
Bath Linen,ADIDAS Backpacks
Paintings & Posters,ADIDAS Men Sandals & Floaters
Home Decor,ADIDAS Deodorant Spray
Stickers & Wallpapers,BEARDO Hair Oil
Wall Decor Items,BEARDO Beard Oil
Showpieces & Decor Accents,BEARDO Face Wash
Home Lighting,BEARDO Bath Combos and Kit
Decor lighting & Accessories,BEARDO Moisturizer
Automation & Robotics,BEARDO Body Wash
Home Improvement,BEARDO Eau De Parfum
Home Utilities and Organizers,BEARDO Men's Grooming Combo Kit
Building Materials and Supplies,BEARDO Hair Brush
Pet Supplies,BEARDO Baby Hair Oils
,BEARDO Face Cream and Gel
,BEARDO Face Pack
,BEARDO Talcum Powder
,BEARDO Skin Care Combo
,BEARDO Perfume
,Beardo Bath Brush
,BEARDO Hair Wax
,Beardo Loofah
,BEARDO Deodorant Roll-ons
,BEARDO Scrub
,BEARDO Deodorant Spray
,Beardo Shaving Razors
,BEARDO Trimmers
,BEARDO Hair Styling
,REEBOK Men Casual Shoes
,REEBOK Men Sports Shoes
,REEBOK Men Slippers & Flip Flops
,REEBOK Men's T-shirts
,"REEBOK Head, Neck & Shoulder Support"
,REEBOK Cricket Balls
,REEBOK Supports
,REEBOK Women's Sports Shoes
,REEBOK Men's Caps
,REEBOK Men's Sweatshirts
,Skechers Sports Shoes
,Skechers Women's Footwear
,Skechers Men Casual Shoes
,Skechers Women's Slippers & Flip Flops
,Skechers Men Sports Shoes
,Skechers Men Slippers & Flip Flops
,Skechers Women's Sports Shoes
,NIKE Deodorant Spray
,NIKE Pouches and Potlis
,NIKE Men's Sweatshirts
,NIKE Kids' Trousers
,NIKE Men Slippers & Flip Flops
,NIKE Men Sports Shoes
,NIKE Duffel Bags
,NIKE Casual Shoes
,NIKE Eau De Toilette
,NIKE Backpacks
,NIKE Men Casual Shoes
,NIKE Resistance Tubes
,NIKE Women's Casual Shoes
,NIKE Men's and Women's Socks
,Women's Shorts
,Women's Dresses
,Women's Tops
,Women's Jeans
,Clothing and Accessories
,Bottomwear
,Women's Skirts
,Women's Capris
,Women's Panties
,Bras
,Women's Night Dresses and Nighties
,Shapewears
,Lingerie Sets
,Women's Swimsuits
,Dresses and Gowns
,Women's Camisoles and Slips
,Sarees
,"Kurtas, Ethnic Sets and Bottoms"
,Fabrics
,Women's Kurtas
,Lehenga Cholis
,Women's Gowns
,Blouses
,Women's Ethnic Sets
,Dupattas
,Palazzos
,Women's Leggings and Churidars
,Harem Pants
,Trousers
,Women's Footwear
,Women's Flats
,Women's Heels
,Women's Wedges
,Women's Sports Shoes
,Women's Casual Shoes
,Women's Slippers & Flip Flops
,Personal Care Appliances
,Epilators
,Hair Dryers
,Makeup
,Hair Care
,Body and Face Care
,Jewellery
,Precious Jewellery
,Bangalore Refinery Coins & Bars
,MMTC-PAMP India Pvt Ltd Coins & Bars
,Aspect Bullion & Refinery Coins & Bars
,SILVIYA Coins & Bars
,Joyalukkas Coins & Bars
,BHIMA Coins & Bars
,Guarantee Ornament House Coins & Bars
,MAA SILVER Coins & Bars
,WOMEN  PLUS Co-ords
,Women Plus Women's Kurtas
,Handbags & Clutches
,Shoulder Bags
,Totes
,Sling Bags
,Clutches
,FOREVER 21 Women's Leggings and Churidars
,FOREVER 21 Men's Shorts
,FOREVER 21 Women's Skirts
,FOREVER 21 Men's T-shirts
,FOREVER 21 Sling Bags
,FOREVER 21 Men's Jeans
,FOREVER 21 Casual Shirts
,ACCESSORIZE LONDON Sling Bags
,ACCESSORIZE LONDON Wallets
,ACCESSORIZE LONDON Handbags
,ACCESSORIZE LONDON Backpack Handbags
,ACCESSORIZE LONDON Sunglasses
,ACCESSORIZE LONDON Clutches & Wallets
,ACCESSORIZE LONDON Necklaces
,Fastrack Sunglasses
,Fastrack Wrist Watches
,Fastrack True Wireless
,Fastrack Eau De Parfum
,Fastrack Smart Watches
,Divastri Women's Flats
,Divastri Women's Ethnic Sets
,Divastri Women's Lehenga Cholis
,Divastri Chains
,Divastri Women's Footwear
,Divastri Women's Sarees
,Rare Roots Women's Tops
,Rare Roots Women's Dresses
,Rare Roots Women's Skirts
,Rare Roots Women's Kurtas
,SESA Hair Treatment
,aadikesh Hair Oil
,Adivasi Baby Hair Oils
,Adivasi Hair Oil
,ashpveda Hair Color
,SESA Hair Oil
,Arsh Organics Hair Oil
,TRU HAIR & SKIN Hair Oil
,TRU HAIR Hair Oil
,Anmi Women's Kurtas
,Anmi Women's Sarees
,Women's Sarees
,Skating
,Badminton
,Cricket Kits
,Sports
,Football
,Cycles
,Fitness Equipment
,Supports
,Exercise & Fitness
,Dumbbells
,Ab Exercisers
,Shakers and Sippers
,Baking Ingredients and Essential Products
,Yoga Mats
,Gym Gloves
,"Dry Fruit, Nut & Seed"
,Food Products
,Packaged Sweets
,Perfume
,Breakfast Cereal
,Health Supplements
,Vitamin Supplement
,Protein Supplement
,Books
,Higher Education and Professional Books
,Pens & Stationery
,Pens
,Desk Organizers
,Calculators
,Key Chains
,Automotive Accessories
,Helmets and Riding Gear
,Car Media Players
,Car Mobile Holders
,Oils and Lubricants
,Plastic Packaging Bags
,Home Medical Supplies
,Musical Instruments
,Gaming
,Gaming Accessories
,Smart Glasses
,Kitchen Tools
,Gas Stoves
,Tawas
,Pans
,Pressure Cookers
,Mugs
,Kitchen Storage & Containers
,Dinner Sets
,Water Bottles & Flasks
,Lunch Boxes
,Casseroles
,Kitchen Containers
,Furniture
,Beds & More
,Wardrobes
,Sofas
,Mattresses
,TV Entertainment Units
,Sofa Beds
,Coffee Tables
,Shoe Racks & More
,Office Study Table
,Bean Bags
,Collapsible Wardrobes
,Home Furnishing
,Bedsheets
,Blankets
,Curtains
,Cushions & Pillows
,Bath Towels
,Kitchen & Table Linen
,Floor Coverings
,Paintings
,Clocks
,Home Decor
,Stickers
,Wall Shelves
,Showpieces & Figurines
,Decor lighting & Accessories
,Utility Lighting
,Wall Lamps
,Ceiling Lamps
,Table Lamps
,Automation & Robotics
,Smart Door Locks
,Tools and Measuring Equipment
,Home Storage and Organization
,Lawn and Gardening
,Bathroom and Kitchen Fittings
,Pet Supplies
,Fish & Aquatic
,Decoration
,Fiction Books
</file>

<file path="server/importCategories.js">
import fs from 'fs';
import path from 'path';
import csv from 'csv-parser';
import mongoose from 'mongoose';
import dotenv from 'dotenv';

// Load environment variables
dotenv.config();

// Create Category Schema
const categorySchema = new mongoose.Schema({
    category: String,
    subcategory: String
});

const Category = mongoose.model('Category', categorySchema);

async function importCategoryData() {
    try {
        // Check if environment variable exists
        if (!process.env.DB_PASSWORD) {
            console.error('DB_PASSWORD environment variable is not set!');
            console.log('Please check your .env file in the server directory');
            return;
        }

        const password = process.env.DB_PASSWORD;
        const URL = `mongodb+srv://yashanand37:${password}@cluster0.mwn1mjt.mongodb.net/flipkart?retryWrites=true&w=majority&appName=Cluster0`;
        
        console.log('Connecting to MongoDB...');
        await mongoose.connect(URL);
        console.log('Database connected successfully for category import.');
    } catch (error) {
        console.error('Error connecting to database:', error.message);
        return;
    }

    try {
        await Category.deleteMany({});
        console.log('Existing categories collection cleared.');
    } catch (error) {
        console.error('Error clearing categories collection:', error.message);
        mongoose.connection.close();
        return;
    }

    const categoriesToSave = [];
    const csvFilePath = path.resolve(process.cwd(), 'categories_subcategories_list.csv');

    // Check if CSV file exists
    if (!fs.existsSync(csvFilePath)) {
        console.error(`Category CSV file not found at: ${csvFilePath}`);
        mongoose.connection.close();
        return;
    }

    console.log(`Reading category CSV file from: ${csvFilePath}`);

    fs.createReadStream(csvFilePath)
        .pipe(csv())
        .on('data', (row) => {
            if (row.category && row.category.trim() !== '') {
                categoriesToSave.push({
                    category: row.category.trim(),
                    subcategory: row.subcategory ? row.subcategory.trim() : ''
                });
            }
        })
        .on('end', async () => {
            console.log('Category CSV file processing finished.');
            try {
                if (categoriesToSave.length > 0) {
                    await Category.insertMany(categoriesToSave);
                    console.log(`${categoriesToSave.length} categories imported successfully!`);
                } else {
                    console.log('No categories found in CSV to import.');
                }
            } catch (error) {
                console.error('Error inserting category data:', error.message);
            } finally {
                mongoose.connection.close();
                console.log('Database connection closed.');
            }
        })
        .on('error', (error) => {
            console.error('Error reading CSV file:', error.message);
            mongoose.connection.close();
        });
}

importCategoryData();
</file>

<file path="server/importData.js">
import fs from 'fs';
import path from 'path';
import csv from 'csv-parser';
import mongoose from 'mongoose';
import dotenv from 'dotenv';
import Product from './model/productSchema.js';

dotenv.config();

async function importCSVData() {
    try {
        const password = process.env.DB_PASSWORD;
        const URL = `mongodb+srv://yashanand37:${password}@cluster0.mwn1mjt.mongodb.net/flipkart?retryWrites=true&w=majority&appName=Cluster0`;
        await mongoose.connect(URL);
        console.log('Database connected successfully for import.');
    } catch (error) {
        console.error('Error connecting to database:', error.message);
        return;
    }

    try {
        await Product.deleteMany({});
        console.log('Existing products collection cleared.');
    } catch (error) {
        console.error('Error clearing products collection:', error.message);
        mongoose.connection.close();
        return;
    }

    const productsToSave = [];
    const csvFilePath = path.resolve(process.cwd(), 'flipkart_appliances_cleaned.csv');

    fs.createReadStream(csvFilePath)
        .pipe(csv())
        .on('data', (row) => {
            // Parse prices properly - remove currency symbols and convert to numbers
            const retailPrice = parseFloat(row.retail_price?.replace(/[₹,]/g, '')) || 0;
            const discountedPrice = parseFloat(row.discounted_price?.replace(/[₹,]/g, '')) || 0;
            
            let discount = '0%';
            if (retailPrice > 0 && discountedPrice < retailPrice) {
                discount = Math.round(((retailPrice - discountedPrice) / retailPrice) * 100) + '% off';
            }

            const formattedProduct = {
                id: row.pid, // Use pid as the main ID
                pid: row.pid, // Keep pid field as well
                url: row.image || 'https://via.placeholder.com/300',
                detailUrl: row.image || 'https://via.placeholder.com/300',
                title: {
                    shortTitle: row.category || row.subcategory || 'Product',
                    longTitle: row.product_name || 'Unknown Product'
                },
                price: {
                    mrp: retailPrice,
                    cost: discountedPrice,
                    discount: discount
                },
                description: row.description || 'No description available.',
                discount: discount,
                tagline: row.brand || row.category || 'Product',
                brand: row.brand,
                category: row.category,
                subcategory: row.subcategory,
                rating: parseFloat(row.product_rating) || 0,
                specifications: row.product_specifications
            };
            
            console.log(`Processing: ${formattedProduct.title.longTitle}`);
            productsToSave.push(formattedProduct);
        })
        .on('end', async () => {
            console.log('CSV file processing finished.');
            try {
                if (productsToSave.length > 0) {
                    await Product.insertMany(productsToSave);
                    console.log(`${productsToSave.length} products imported successfully!`);
                } else {
                    console.log('No products found in CSV to import.');
                }
            } catch (error) {
                console.error('Error inserting data:', error.message);
            } finally {
                mongoose.connection.close();
                console.log('Database connection closed.');
            }
        });
}

importCSVData();
</file>

<file path="server/index.js">
import express from 'express';
import bodyParser from 'body-parser';
import cors from 'cors';
import dotenv from 'dotenv';
import Connection from './database/db.js';
import Routes from './routes/route.js';
import Product from './model/productSchema.js';
import { products } from './constants/product.js';
import { Client } from '@elastic/elasticsearch';
import compression from 'compression';

dotenv.config();

const app = express();
const PORT = 8000;

app.use(compression()); // Add this before other middleware

// --- ELASTICSEARCH & REDIS SETUP ---
export const esClient = new Client({ node: 'http://localhost:9200' });
const indexName = 'products';

async function setupElasticsearch() {
    console.log('Setting up Elasticsearch index...');
    const productsFromDB = await Product.find({});
    if (!productsFromDB || productsFromDB.length === 0) {
        console.log('No products in MongoDB to index.');
        return;
    }

    const indexExists = await esClient.indices.exists({ index: indexName });
    if (indexExists) await esClient.indices.delete({ index: indexName });

    await esClient.indices.create({
        index: indexName,
        body: {
            mappings: {
                properties: {
                    // Do NOT include _id here!
                    name: { type: 'search_as_you_type' },
                    category: { type: 'text' },
                    suggest: { type: 'completion' },
                    rating: { type: 'float' } // Added rating field for sorting
                }
            }
        }
    });

    const body = productsFromDB.flatMap(doc => {
        const source = {
            name: doc.title.longTitle,
            category: doc.title.shortTitle,
            suggest: [
                doc.title.longTitle,
                doc.title.shortTitle,
                doc.category,
                ...(doc.title.longTitle ? doc.title.longTitle.split(' ') : [])
            ].filter(Boolean),
            rating: doc.rating || 0 // Added rating to indexed data
        };
        return [{ index: { _index: indexName, _id: doc._id.toString() } }, source];
    });

    await esClient.bulk({ refresh: true, body });
    console.log(`${productsFromDB.length} products from MongoDB indexed into Elasticsearch.`);
}

const insertDefaultData = async () => {
    try {
        const count = await Product.countDocuments();
        if (count > 0) {
            console.log('Products already exist in DB. Skipping default data insertion.');
            return;
        }
        await Product.insertMany(products);
        console.log('Default product data imported successfully.');
    } catch (error) {
        console.error('Error inserting default product data:', error.message);
    }
};

Connection()
    .then(() => {
        insertDefaultData();
        setupElasticsearch().catch(console.error);
    });

// Middleware and routes
app.use(bodyParser.json({ extended: true }));
app.use(bodyParser.urlencoded({ extended: true }));
app.use(cors());
app.use('/', Routes);

// Start the server
app.listen(PORT, () => console.log(`Server is running successfully on PORT ${PORT}`));
</file>

<file path="server/package.json">
{
  "name": "server",
  "version": "1.0.0",
  "description": "",
  "main": "index.js",
  "type": "module",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1",
    "start": "nodemon server.js"
  },
  "author": "",
  "license": "ISC",
  "dependencies": {
    "@elastic/elasticsearch": "8.14.1",
    "bcrypt": "^6.0.0",
    "body-parser": "^1.19.0",
    "compression": "^1.8.1",
    "cors": "^2.8.5",
    "csv-parser": "^3.2.0",
    "dot-env": "0.0.1",
    "dotenv": "^9.0.2",
    "express": "^4.17.1",
    "formidable": "^1.2.2",
    "https": "^1.0.0",
    "jsonwebtoken": "^9.0.2",
    "mongoose": "^5.12.9",
    "nodemon": "^2.0.7",
    "razorpay": "^2.0.7",
    "redis": "^4.6.15",
    "uuid": "^8.3.2"
  }
}
</file>

<file path="package.json">
{
  "name": "flipkart",
  "version": "1.0.0",
  "description": "Sijeesh Miziha's Flipkart Clone is done with top-notch features for the entrepreneur startups like Flipkart it has RazorPay Integration and get money from anywhere. This Flipkart clone with the best features in mobile, web, and iOS platforms, Completely responsive design using Material UI. - 🧪 **Kindly Please Support Me**   - I can provide brand-free products and full technical support for 1 year along with 1-year free update support and moreover - 👁 **Well typed**   - Clean JavaScript code with good folder structure., - 📄 **Well documented**   - I can provide full reference & installation documentation alongside detailed guides through my Youtube Channel Sijeesh Miziha feel free to subscribe    - If You supporting me., then I can also create the full lecture video from the scratch..,you can learn React.js as beginer  - **Requirements to fork this repo**    - Strong knowledge of JavaScript    - React js, redux , redux-thunk , context    - Knowledge of Express js & MVC architecture    - Basic knowledge in MongoDB & Mongoose",
  "main": "index.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "repository": {
    "type": "git",
    "url": "git+https://github.com/sijeeshmiziha/flipkart.git"
  },
  "keywords": [],
  "author": "",
  "license": "ISC",
  "bugs": {
    "url": "https://github.com/sijeeshmiziha/flipkart/issues"
  },
  "homepage": "https://github.com/sijeeshmiziha/flipkart#readme"
}
</file>

<file path="README.md">
# Flipkar Grid Final Submission

This repo contains final code submission for Team LockedIn in Flipkart Grid Finals 7.0.
</file>

</files>
